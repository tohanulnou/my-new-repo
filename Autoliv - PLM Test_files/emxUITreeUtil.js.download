/*=================================================================
 *  JavaScript Tree Utilities
 *  emxUITreeUtil.js
 *  Version 1.0
 *  Requires: emxUIConstants.js, emxUICoreTree.js
  *
 *  This file contains utility methods for interfacing with the
 *  structure and details trees.
 *
 *  Copyright (c) 1992-2012 Dassault Systemes. All Rights Reserved.
 *  This program contains proprietary and trade secret information
 *  of MatrixOne,Inc. Copyright notice is precautionary only
 *  and does not evidence any actual or intended publication of such program
 *
 *  static const char RCSID[] = $Id: emxUITreeUtil.js.rca 1.12 Wed Oct 22 15:47:52 2008 przemek Experimental przemek $
 *=================================================================
 */

//-----------------------------------------------------------------
// Public Function addStructureTreeNode()
//-----------------------------------------------------------------
// BROWSER(S)
//      Internet Explorer 5.0+
//      Netscape Navigator 4.x
//      Mozilla 1.0.1+ (Netscape 7.0+)
//
// AUTHOR(S)
//      John Rajan, (JR) 12-Feb-03
//
// EDITOR(S)
//      Nicholas C. Zakas, (NCZ) 13-Feb-03
//
// DESCRIPTION
//      This function to add new node to the Structure tree and updates the Context tree. This function
//      is considered PUBLIC and may be used by developers.
//
// PARAMETERS
//      strObjectId (String) - The OID of the new object added  (JR, 12-Feb-03)
//      strParentId (String) - OID of the parent object to which the new object is connected  (JR, 12-Feb-03)
//      strTreeId (String) - input jsTreeID URL paramter, passed from tree - current selected node  (JR, 12-Feb-03)
//      strSuiteDirectory (String) - The app directory of the suite  (JR, 12-Feb-03)
//      blnAddToDetailsTree (Boolean) - whether to add to the details tree as well (optional).
//
// RETURNS
//      (nothing)
//-----------------------------------------------------------------
function addStructureTreeNode(strObjectId, strParentId, strTreeId, strSuiteDirectory, blnAddToDetailsTree, strRelId, blnRefresh) {

        //var strContextNavigatorUrl = "../common/emxTreeDisplay.jsp?objectId="+strObjectId+"&mode=insert&jsTreeID="+strTreeId;
	   if(typeof blnRefresh=='undefined'){
		    blnRefresh = true;
	    }
        if(top.objStructureTree) {
        	
        	var strFinalURL = "../common/emxUpdateStructureTree.jsp?objectId="+strObjectId+"&parentId="+strParentId+"&selectedStructure="+top.objStructureTree.selectedStructure+"&structureTreeName="+top.objStructureTree.menuName+"&relId="+strRelId;;

            if (strSuiteDirectory != null && strSuiteDirectory !="" || strSuiteDirectory != "undefined"){

                if (strSuiteDirectory.indexOf("=") >= 0) {
                    strFinalURL += "&"+strSuiteDirectory;
                    //strContextNavigatorUrl += "&"+strSuiteDirectory;
                }else{
                    strFinalURL += "&emxSuiteDirectory="+strSuiteDirectory;
                    //strContextNavigatorUrl += "&emxSuiteDirectory="+strSuiteDirectory;
                }
            } //End: if(strSuiteDirectory != null && strSuiteDirectory !="" || strSuiteDirectory != "undefined")

            var objFrame=top.openerFindFrame(top, "hiddenTreeContentFrame");
            if (objFrame == null) {
            	objFrame=top.openerFindFrame(top, "hiddenTreeFrame");
            } //End: if (objFrame == null)
            if (objFrame) {
            	objFrame.location.href = strFinalURL;
            } //End: if (objFrame)

        } //End: if(top.objStructureTree)

        if(top.objStructureTree && blnRefresh) {
                var objFrame=top.findFrame(top, "detailsDisplay");
                objFrame.document.location.href = objFrame.document.location.href;
        }

        if (blnAddToDetailsTree == null || blnAddToDetailsTree) {
            addContextTreeNode(strObjectId,strTreeId,strSuiteDirectory);
        }

} //End: function addStructureTreeNode(strObjectId, strParentId, strTreeId, strSuiteDirectory)

//-----------------------------------------------------------------
// DEPRECATED Function addStructureNode()
//-----------------------------------------------------------------
// BROWSER(S)
//      Internet Explorer 5.0+
//      Netscape Navigator 4.x
//      Mozilla 1.0.1+ (Netscape 7.0+)
//
// AUTHOR(S)
//      John Rajan, (JR) 12-Feb-03
//
// EDITOR(S)
//      Nicholas C. Zakas, (NCZ) 13-Feb-03
//
// DESCRIPTION
//      This function to add new node to the Structure tree and updates the Details tree. 
//      DEPRECATED - use addStructureTreeNode() instead.
//
// PARAMETERS
//      strObjectId (String) - The OID of the new object added  (JR, 12-Feb-03)
//      strParentId (String) - OID of the parent object to which the new object is connected  (JR, 12-Feb-03)
//      strTreeId (String) - input jsTreeID URL paramter, passed from tree - current selected node  (JR, 12-Feb-03)
//      strSuiteDirectory (String) - The app directory of the suite  (JR, 12-Feb-03)
//      blnAddToDetailsTree (Boolean) - whether to add to the details tree as well (optional).
//
// RETURNS
//      (nothing)
//-----------------------------------------------------------------
function addStructureNode(strObjectId, strParentId, strTreeId, strSuiteDirectory, blnAddToDetailsTree) {
        addStructureTreeNode(strObjectId, strParentId, strTreeId, strSuiteDirectory, blnAddToDetailsTree);
} //End: function addStructureNode(strObjectId, strParentId, strTreeId, strSuiteDirectory)

//-----------------------------------------------------------------
// Public Function addMultipleStructureNodes()
//-----------------------------------------------------------------
// BROWSER(S)
//      Internet Explorer 5.0+
//      Netscape Navigator 4.x
//      Mozilla 1.0.1+ (Netscape 7.0+)
//
// AUTHOR(S)
//      Jean Binjour, (JB) 6/23/03
//
// EDITOR(S)
//
//
// DESCRIPTION
//      This function to add new node to the Structure tree and updates the Context tree. This function
//      is considered PUBLIC and may be used by developers.
//
// PARAMETERS
//      strObjectId (String) - The OID List, comma seperated  (JB) 6/23/03
//      strParentId (String) - OID of the parent object to which the new object is connected  (JB) 6/23/03
//      strTreeId (String) - input jsTreeID URL paramter, passed from tree - current selected node  (JB) 6/23/03
//      strSuiteDirectory (String) - The app directory of the suite  (JB) 6/23/03
//      blnAddToDetailsTree (Boolean) - whether to add to the details tree as well (optional).
//
// RETURNS
//      (nothing)
//-----------------------------------------------------------------
function addMultipleStructureNodes(strObjectId, strParentId, strTreeId, strSuiteDirectory, blnAddToDetailsTree) {
       //var arrObjIds=strObjectId.split(",");
       //if( arrObjIds.length <=100 ){
         addStructureNode(strObjectId, strParentId, strTreeId, strSuiteDirectory, false)
       //}

} //End: function addStructureNode(strObjectId, strParentId, strTreeId, strSuiteDirectory)


//-----------------------------------------------------------------
// Public Function addRelationshipTo()
//-----------------------------------------------------------------
// BROWSER(S)
//      Internet Explorer 5.0+
//      Netscape Navigator 4.x
//      Mozilla 1.0.1+ (Netscape 7.0+)
//
// AUTHOR(S)
//      Jean Binjour, (JB) 6/23/03
//
// EDITOR(S)
//
//
// DESCRIPTION
//      This function add a new node to all nodes with the passed in objectid
//
// PARAMETERS
//      strObjectId (String) - The OID used to find the structure tree nodes  (JB) 6/23/03
//
// RETURNS
//      (nothing)
//-----------------------------------------------------------------
function addRelationshipTo(strObjectId) {
     if(top.objStructureTree) {
        var objStructureTree = top.objStructureTree;
        var objNode = objStructureTree.findNodeByObjectID(strObjectId);
        objStructureTree.addRelationshipTo(objNode);
     }

} //End: function addRelationshipTo(strObjectId, strParentId, strTreeId, strSuiteDirectory)



//-----------------------------------------------------------------
// Public Function removeRelationshipTo()
//-----------------------------------------------------------------
// BROWSER(S)
//      Internet Explorer 5.0+
//      Netscape Navigator 4.x
//      Mozilla 1.0.1+ (Netscape 7.0+)
//
// AUTHOR(S)
//      Jean Binjour, (JB) 6/23/03
//
// EDITOR(S)
//
//
// DESCRIPTION
//      This function removes all nodes with the passed in objectid
//
// PARAMETERS
//      strObjectId (String) - The OID used to find the structure tree nodes  (JB) 6/23/03
//
// RETURNS
//      (nothing)
//-----------------------------------------------------------------
function removeRelationshipTo(strObjectId) {
     if(top.objStructureTree) {
        var objStructureTree = top.objStructureTree;
        var objNode = objStructureTree.findNodeByObjectID(strObjectId);
        objStructureTree.removeRelationshipTo(objNode);
     }

} //End: function removeRelationshipTo(strObjectId, strParentId, strTreeId, strSuiteDirectory)





//-----------------------------------------------------------------
// Public Function addDetailsTreeNode()
//-----------------------------------------------------------------
// BROWSER(S)
//      Internet Explorer 5.0+
//      Netscape Navigator 4.x
//      Mozilla 1.0.1+ (Netscape 7.0+)
//
// AUTHOR(S)
//      John Rajan, (JR) 12-Feb-03
//
// EDITOR(S)
//      Nicholas C. Zakas (NCZ), 13-Feb-03
//
// DESCRIPTION
//      This function to add new node to the Details tree. This function
//      is considered PUBLIC and may be used by developers.
//
// PARAMETERS
//      strObjectId (String) -  OID of the new object added  (JR, 12-Feb-03)
//      strTreeId (String) - input jsTreeID URL paramter, passed from tree - current selected node  (JR, 12-Feb-03)
//      strSuiteDirectory (String) - The app directory of the suite  (JR, 12-Feb-03)
//
// RETURNS
//      (nothing)
//-----------------------------------------------------------------
function addDetailsTreeNode(strObjectId, strTreeId, strSuiteDirectory){

	if(top.objDetailsTree && emxUIConstants.STR_UITREE_OLDUI == "true"){
        var strContextNavigatorUrl="../common/emxTreeDisplay.jsp?objectId="+strObjectId+"&mode=insert&jsTreeID="+strTreeId;
        if (strSuiteDirectory != null && strSuiteDirectory !="" || strSuiteDirectory != "undefined" ) {
            if (strSuiteDirectory.indexOf("=") >= 0) {
                strContextNavigatorUrl += "&"+strSuiteDirectory;
            } else {
                strContextNavigatorUrl += "&emxSuiteDirectory="+strSuiteDirectory;
            }
        } //End: if (strSuiteDirectory != null && strSuiteDirectory !="" || strSuiteDirectory != "undefined" )

        if (top.objDetailsTree){
                var objFrame=top.openerFindFrame(top, "treeDisplay");
                if (objFrame){
                        objFrame.location.href = strContextNavigatorUrl;
                } //End: if (objFrame)
        } //End: if (top.objDetailsTree)
	}

} //End: function addDetailsTreeNode(strObjectId, strTreeId, strSuiteDirectory)

//-----------------------------------------------------------------
// DEPRECATED Function addContextTreeNode()
//-----------------------------------------------------------------
// BROWSER(S)
//      Internet Explorer 5.0+
//      Netscape Navigator 4.x
//      Mozilla 1.0.1+ (Netscape 7.0+)
//
// AUTHOR(S)
//      John Rajan, (JR) 12-Feb-03
//
// EDITOR(S)
//      Nicholas C. Zakas (NCZ), 13-Feb-03
//
// DESCRIPTION
//      This function to add new node to the Context tree. 
//      DEPRECATED - use addDetailsTreeNode() instead.
//
// PARAMETERS
//      strObjectId (String) -  OID of the new object added  (JR, 12-Feb-03)
//      strTreeId (String) - input jsTreeID URL paramter, passed from tree - current selected node  (JR, 12-Feb-03)
//      strSuiteDirectory (String) - The app directory of the suite  (JR, 12-Feb-03)
//
// RETURNS
//      (nothing)
//-----------------------------------------------------------------
function addContextTreeNode(strObjectId, strTreeId, strSuiteDirectory){
        addDetailsTreeNode(strObjectId, strTreeId, strSuiteDirectory);
} //End: function addContextTreeNode(strObjectId, strTreeId, strSuiteDirectory)

//-----------------------------------------------------------------
// Public Function deleteObjectFromTrees()
//-----------------------------------------------------------------
// BROWSER(S)
//      Internet Explorer 5.0+
//      Netscape Navigator 4.x
//      Mozilla 1.0.1+ (Netscape 7.0+)
//
// AUTHOR(S)
//      John Rajan, (JR) 12-Feb-03
//
// EDITOR(S)
//      Nicholas C. Zakas (NCZ), 13-Feb-03
//
// DESCRIPTION
//      This function deletes the object with the given object ID
//      from both the details tree and the structure tree. This function
//      is considered PUBLIC and may be used by developers.
//
// PARAMETERS
//      strObjectId (String) - OID of the object to be deleted. (JR, 12-Feb-03)
//      blnRefresh (boolean) - should the trees be refreshed?. (JR, 12-Feb-03)
//
// RETURNS
//      (nothing)
//-----------------------------------------------------------------
function deleteObjectFromTrees(strObjectId, blnRefresh) {

        //set refresh flag
        blnRefresh = (blnRefresh == null ? true : blnRefresh);

        if(top.objStructureTree){
	        //delete object from structure tree
	        top.objStructureTree.deleteObject(strObjectId,blnRefresh);
		} else {
			if(top.bclist){
				top.bclist.remove(strObjectId);
			}
		}

        if(top.objDetailsTree && emxUIConstants.STR_UITREE_OLDUI == "true"){
	        //delete object from details tree
	        top.objDetailsTree.deleteObject(strObjectId,blnRefresh);
        }
        
        

} //End: function deleteObjectFromTrees(strObjectId, blnRefresh)

//-----------------------------------------------------------------
// DEPRECATED Function deleteStructureNode()
//-----------------------------------------------------------------
// BROWSER(S)
//      Internet Explorer 5.0+
//      Netscape Navigator 4.x
//      Mozilla 1.0.1+ (Netscape 7.0+)
//
// AUTHOR(S)
//      John Rajan, (JR) 12-Feb-03
//
// EDITOR(S)
//      Nicholas C. Zakas (NCZ), 13-Feb-03
//
// DESCRIPTION
//      This function deletes the object with the given object ID
//      from both the details tree and the structure tree. 
//      DEPRECATED - use deleteObjectFromTrees() instead.
//
// PARAMETERS
//      strObjectId (String) - OID of the object to be deleted. (JR, 12-Feb-03)
//      blnRefresh (boolean) - should the tree be refreshed?. (JR, 12-Feb-03)
//
// RETURNS
//      (nothing)
//-----------------------------------------------------------------
function deleteStructureNode(strObjectId, blnRefresh) {
        deleteObjectFromTrees(strObjectId, blnRefresh);
} //End: function deleteStructureNode(strObjectId, blnRefresh)

//-----------------------------------------------------------------
// Public Function deleteMultipleStructureNode()
//-----------------------------------------------------------------
// BROWSER(S)
//      Internet Explorer 5.0+
//      Netscape Navigator 4.x
//      Mozilla 1.0.1+ (Netscape 7.0+)
//
// AUTHOR(S)
//      Jean Binjour, (JB) 6/23/03
//
// EDITOR(S)
//
//
// DESCRIPTION
//      This function deletes multiple nodes at a time.
//
// PARAMETERS
//      strObjectId (String) - OID List to be deleted. (JB) 6/23/03
//      blnRefresh (boolean) - should the tree be refreshed?. (JB) 6/23/03
//
// RETURNS
//      (nothing)
//-----------------------------------------------------------------
function deleteMultipleStructureNode(strObjectId) {
	if(strObjectId != null && strObjectId.length > 0 ){
           var arrObjIds=strObjectId.split(",");
           //set refresh flag
           //blnRefresh = (blnRefresh == null ? true : blnRefresh);
           for (var z=0; z < arrObjIds.length; z++) {
               //get an object id
               var sObjId = arrObjIds[z];
               if(top.objStructureTree){    
            	// If selectedNode is not null, then only invoke method "removeRelationshipTo" on it.
            	   var selectedNodeObj = top.objStructureTree.getSelectedNode();
            	   if(selectedNodeObj){
            		   selectedNodeObj.removeRelationshipTo(sObjId);
            	   }                   
               } else {
            	   if( top.bclist){
            		   top.bclist.remove(sObjId);
            	   }
               }
           }
     }
} //End: function deleteStructureNode(strObjectId, blnRefresh)

//-----------------------------------------------------------------
//Public Function changeObjectLabelInTree()
//-----------------------------------------------------------------
//BROWSER(S)
//
//AUTHOR(S)
//    Senthil Rajagopal, (SL9) 09/14/10
//
//EDITOR(S)
//
//
//DESCRIPTION
//   This function is to change the label of the object nodes
//   In case of new UI, there is no details tree and hence no updates are done to details tree. 
//
//PARAMETERS
//   strObjectId (String) - The OID of the object to be modified  (JR, 12-Feb-03)
//   strLabel (String) - The new label for the object  (JR, 12-Feb-03)
//   blnChangeDetailsTree (Boolean) - whether to add to the details tree as well (optional).
//   blnRefresh (Boolean) - whether to refresh the trees (optional).
//
//RETURNS
//   (nothing)
//-----------------------------------------------------------------
function changeObjectLabelInTree(strObjectId, strLabel, blnChangeDetailsTree, blnRefreshStructureTree, blnRefreshDetailsTree ){
    var structureTree = top.objStructureTree;
    if(structureTree){
        structureTree.doNavigate = true;
        var structureNode = structureTree.findNodeByObjectID(strObjectId);
        if(structureNode) {
            structureNode.changeObjectName(strLabel, blnRefreshStructureTree);
        } else if(top.bclist){
            top.bclist.changeLabel(strObjectId, strLabel);
        }
    }
    
    if(top.bclist && !structureTree){
        top.bclist.changeLabel(strObjectId, strLabel);
    }
    
    if(emxUIConstants.STR_UITREE_OLDUI == "true" && blnChangeDetailsTree){
        var detailsTree = top.objDetailsTree;
        if(detailsTree){
            detailsTree.doNavigate = true;
            var detailsNode = detailsTree.findNodeByObjectID(strObjectId);
            if(detailsNode) {
                detailsNode.changeObjectName(strLabel, blnRefreshDetailsTree);
            }
        }
    }

    
}

//-----------------------------------------------------------------
//Public Function changeObjectIDInTree()
//-----------------------------------------------------------------
//BROWSER(S)
//
//AUTHOR(S)
//  Senthil Rajagopal, (SL9) 09/14/10
//
//EDITOR(S)
//
//
//DESCRIPTION
// This function is to change the ID of the object nodes
// In case of new UI, there is no details tree and hence no updates are done to details tree. 
//
//PARAMETERS
// strObjectId (String) - The OID of the object to be modified  (JR, 12-Feb-03)
// strNewId (String) - The new id for the object  (JR, 12-Feb-03)
// blnChangeDetailsTree (Boolean) - whether to add to the details tree as well (optional).
// blnRefresh (Boolean) - whether to refresh the trees (optional).
//
//RETURNS
// (nothing)
//-----------------------------------------------------------------
function changeObjectIDInTree(strObjectId, strNewId, blnChangeDetailsTree, blnRefresh){
	var structureTree = top.objStructureTree;
	if(structureTree){
		structureTree.doNavigate = true;
		var structureNode = structureTree.findNodeByObjectID(strObjectId);
		if(structureNode) {
	        structureNode.changeObjectID(strNewId, blnRefresh);
	    } else if(top.bclist){
			top.bclist.changeID(strObjectId, strNewId);
		}
	}
	
	if(top.bclist && !structureTree){
		top.bclist.changeID(strObjectId, strNewId);
	}
	
	if(emxUIConstants.STR_UITREE_OLDUI == "true" && blnChangeDetailsTree){
		var detailsTree = top.objDetailsTree;
		if(detailsTree){
			detailsTree.doNavigate = true;
          var detailsNode = detailsTree.findNodeByObjectID(strObjectId);
  		if(detailsNode) {
  			detailsNode.changeObjectID(strNewId, blnRefresh);
  	    }
		}
	}
	
}

//-----------------------------------------------------------------
//DESCRIPTION
//   This function draws/refreshes structure tree. 
//
//PARAMETERS
//   frameStructure (Window) - Window where structure tree should be drawn. If variable is 
//                             not specified, structure tree drawn in emxUIStructureTree (optional)
//
//RETURNS
//   (nothing)
//-----------------------------------------------------------------
function refreshStructureTree(frameStructure) {
	if(top.objStructureTree){
		if(frameStructure){
			top.objStructureTree.displayFrame = frameStructure;
		} else {
			frameStructure = findFrame(top, "emxUIStructureTree");
			top.objStructureTree.displayFrame = frameStructure;
		}
		top.objStructureTree.doNavigate = false;
		top.objStructureTree.refresh();
	}
}

//-----------------------------------------------------------------
//DESCRIPTION
//   This function draws/refreshes Details tree. In new UI details tree is not present and hence no refresh is done.
//
//PARAMETERS
//   (nothing)
//
//RETURNS
//   (nothing)
//-----------------------------------------------------------------
function refreshDetailsTree() {
	if(top.objDetailsTree && emxUIConstants.STR_UITREE_OLDUI == "true"){
		top.objDetailsTree.refresh();
	}
	
	// code to refresh the content page in new UI
    if(emxUIConstants.STR_UITREE_OLDUI == "false") {
       var wndContent   = top.findFrame(top,"detailsDisplay");
       wndContent.location.href = wndContent.location.href;
	}
}

//-----------------------------------------------------------------
//DESCRIPTION
//   This function refreshes both structure tree and details tree. In new UI details tree is not present and hence no refresh is done.
//
//PARAMETERS
//   (nothing)
//
//RETURNS
//   (nothing)
//-----------------------------------------------------------------
function refreshTrees() {
	refreshStructureTree();
	refreshDetailsTree();
}

// IR-285483 - Added for issue reported on IE security patch kb2909921
function ie_changeObjectName(structureTreeNode, label){
	structureTreeNode.changeObjectName(label,false);
}

// IR-285483 - Added for issue reported on IE security patch kb2909921
function ie_changeNodeStructureTreeClick(structureTreeNode, label){
    structureTreeNode.changeNodeStructureTreeClick(label);
}
