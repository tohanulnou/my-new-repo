//=================================================================
// JavaScript Methods for Breadcrumbs
// emxBreadcrumbs.js
//
// Copyright (c) 1992-2012 Dassault Systemes.
// All Rights Reserved.
// This program contains proprietary and trade secret information of MatrixOne,Inc.
// Copyright notice is precautionary only
// and does not evidence any actual or intended publication of such program
//
// static const char RCSID[] = $Id: emxBreadcrumbs.js.rca 1.14 Wed Oct 22 15:48:15 2008 przemek Experimental przemek $
//=================================================================


// namespace
var backInProgress= false;
var forwardInProgress = false;
var historyLimit = top.historyLimit? top.historyLimit : (emxUIConstants && emxUIConstants.NUM_HISTORY_LIMIT ? emxUIConstants.NUM_HISTORY_LIMIT : 20);

var emxBreadCrumbList = emxBreadCrumbList ? emxBreadCrumbList : function(){

	var private = {
	        visitedLinks : [],
	        bcTrails: [],
	        position: 0,
	        clear: true
	};

	var emxBreadCrumb = emxBreadCrumb ? emxBreadCrumb : function(id1, label1 , seperator1, category1, url1, url2){

	    var public = {
	        id       			: id1,
	        label    			: label1,
	        seperator			: seperator1,
	        category 			: category1,
	        selectedId          : "",
	        structureURL		: url1,
	        pageURL      		: url2,
	        getName  : function(){
	    		if(this.category == null || this.category == "null"){
	    			return this.label;
	    		} else {
	    			return this.label + " " + this.seperator + " " + this.category;
	    		}
	    	}
	    };

	    return public;
	};

	var emxBreadCrumbTrail = emxBreadCrumbTrail ? emxBreadCrumbTrail : function(linksList1, position1){

	    var public = {
	    	linksList       	: linksList1 ? linksList1 : [],
	        position   			: position1 ? position1 : linksList1.length,
	        getPosition		: function () {
		    	return this.position;
	        },
	        setPosition		: function (position, deleteothers) {
		    	this.position = position;
		    	if(deleteothers){
		    		if(this.linksList.length > this.position){
	                    this.linksList.splice(this.position, this.linksList.length - this.position);
	                }
		    	}
	        },
	        getPosition		: function () {
		    	return this.position;
	        },
	        setBreadCrumb		: function (position, bc) {

	        	var newDate = new Date;
	        	var uniqueId = newDate.getTime();
	        	private.visitedLinks[uniqueId] = bc;

		    	if(position){
		    		this.linksList[position - 1] = uniqueId;
		    		this.position = position;
		    	} else {
		    		this.linksList[this.position] = uniqueId;
		    		this.position = this.position + 1;
		    		this.linksList = this.linksList.splice(0, this.position);
		    	}
	        },
	        getBreadCrumb		: function (position) {
	    	    if(position){
	    	    	return this.linksList.length > 0 ? private.visitedLinks[this.linksList[position - 1]] : null;
	    	    } else {
	    	    	return this.linksList.length > 0 ? private.visitedLinks[this.linksList[this.position - 1]] : null;
	    	    }
	        },
	        length				: function () {
	    	    return this.linksList.length;
	        },
	        indexOf				: function (objectId) {
	        	for(var i = 0; i < this.linksList.length; i++ ){
	    	    	var bc = private.visitedLinks[this.linksList[i]];
	    	    	if(bc.id == objectId){
	    	    		return i + 1;
	    	    	}
	    	    }
	    	    return 0;
	        },
	        hasReference		: function (uniqueId) {
	        	return this.linksList[this.linksList.find(uniqueId)];
	        },
	        getCopy : function(){
	    		return emxBreadCrumbTrail(this.linksList.slice(), this.position);
	        },
	        getBreadCrumbArray : function(){
	    		var linksArray = new Array();
	    		for(var i = 0; i < this.linksList.length; i++){
	    			var bc = private.visitedLinks[this.linksList[i]];
	    			if(bc) {
	    				linksArray[i] = bc;
	    			} else {
	    				this.setPosition( i , true);
	    			}
	    		}
	    		return linksArray;
	        }
	    };

	    return public;
	};

    var public = {
        indexOf: function(id){
            for(var i = 0; i < private.visitedLinks.length; i++){
               var tempbc = private.visitedLinks[i];
               if(id == tempbc.id){
                   return i;
               }
            }
            return 0;
        },
        setPosition		: function (position) {
	    	private.position = position;
        },
        getPosition		: function () {
	    	return private.position;
        },
        length		: function () {
	    	return private.bcTrails.length ;
        },
        getCurrentBreadCrumbTrail: function(){
        	if(private.clear) return new emxBreadCrumbTrail(new Array());
            if(private.position == 0)
            	return null;
            else
            	return private.bcTrails[private.position - 1];

        },
        addBreadCrumbTrail: function(bctrail){
        	private.clear = false;
        	if(backInProgress || forwardInProgress){
        		return;
        	}
        	private.bcTrails[private.position] = bctrail;
        	this.setPosition(private.position + 1);
        	if(this.getPosition() > historyLimit){
        		var removedBCTrail = private.bcTrails.splice(0, 1);
        		this.setPosition(this.getPosition() - 1)
        		for(var i = 0; i < removedBCTrail[0].linksList.length; i++){
        			var hasReference = false;
        			for(var j = 0; j < private.bcTrails.length; j++){
        				if(private.bcTrails[j].hasReference(removedBCTrail[0].linksList[i]) > -1){
        					hasReference = true;
        					break;
        				}
        			}
        			if(!hasReference) delete private.visitedLinks[removedBCTrail[0].linksList[i]];
        		}
        	}
        	if(this.getPosition() < private.bcTrails.length){
        		private.bcTrails.splice(this.getPosition(), private.bcTrails.length - this.getPosition());
        	}

        },
        insert: function(id, label, seperator, category, url1, url2, insertAfter){
        	var currTrail = this.getCurrentBreadCrumbTrail();
        	var currbc = currTrail ? currTrail.getBreadCrumb() : null;
        	var origbcPos = currTrail ? currTrail.indexOf(id) : 0;
			var origbc = origbcPos ? currTrail.getBreadCrumb(origbcPos) : null;

			if(url1 == "null") url1 = null;

			var selectedId = "";
			if(!url1 && !origbc && !insertAfter){
    			if(currbc && currbc.structureURL){
    				url1 = currbc.structureURL;
    				selectedId = currbc.selectedId;
					if(selectedId){						
						if(selectedId.indexOf(id)==-1){
							selectedId= selectedId + "," + id;
						}else{	
							var regex = new RegExp(id+"(,)?","g");
							selectedId=selectedId.replace(regex,"");							
							selectedId= selectedId + "," + id;
						}
					}else{
						selectedId =id;
					}
    			}
    	    }

			if(insertAfter){
				if(top.objStructureTree){
                	var objNode = top.objStructureTree.getSelectedNode();
                	while(objNode && objNode.parent){
                		selectedId = selectedId ? (objNode.objectID + "," + selectedId) : objNode.objectID;
                		objNode = objNode.parent;
                	}
                }
			}

        	var bc = new emxBreadCrumb(id, label, seperator, category, url1, url2);
        	bc.selectedId = selectedId;
        	if(origbc){
        		if(!bc.label){
                	bc.label = origbc.label;
                }
                if(!bc.seperator){
                	bc.seperator = origbc.seperator;
                }
                if(!bc.structureURL){
                	bc.structureURL = origbc.structureURL;
                }
                if(!bc.selectedId){
                	bc.selectedId = origbc.selectedId;
                }
                if(!bc.pageURL){
                	bc.pageURL = origbc.pageURL;
                }
        	}

        	var newtrail = currTrail ? currTrail.getCopy() : new emxBreadCrumbTrail(new Array());
        	if(insertAfter)newtrail.setPosition(insertAfter, true);
        	origbcPos ? newtrail.setBreadCrumb(origbcPos, bc) : newtrail.setBreadCrumb(0, bc);
        	this.addBreadCrumbTrail(newtrail);
        	/*
        	else {
                private.bcarray[private.position] = bc;
                this.setPosition(bc);
                if(private.bcarray.length > private.position){
                    private.bcarray.splice(private.position, private.bcarray.length - private.position);
                }
            }*/
            drawBreadCrumb();
        },
        insertAfter: function(mainid, id, label, seperator, category, url1, url2){
        	var currTrail = this.getCurrentBreadCrumbTrail();
        	var currbc = currTrail ? currTrail.getBreadCrumb() : null;
        	var origbcPos = currTrail ? currTrail.indexOf(mainid) : 0;
        	var origbc = origbcPos ? currTrail.getBreadCrumb(origbcPos) : null;

            if(origbcPos){
                url1 = origbc.structureURL;
                this.insert(id, label, seperator, category, url1, url2, origbcPos);
            } else {
            	//do nothing
            }
            drawBreadCrumb();
        },
        currentPosition: function(){
            return private.position;
        },
        getBreadCrumb: function(bcid){
        	return private.visitedLinks[bcid];
        },
        remove: function(id){
        	var deletedLinks = new Array();
        	for (var uniqueId in private.visitedLinks){
        		var bc = private.visitedLinks[uniqueId];
        		if(bc.id == id) {
        			delete private.visitedLinks[uniqueId];
        			deletedLinks.push(uniqueId);
        		}
        	}
            drawBreadCrumb();
        },
        changeLabel: function(id, strLabel){
        	for (var uniqueId in private.visitedLinks){
        		var bc = private.visitedLinks[uniqueId];
        		if(bc.id == id) bc.label = strLabel;
        	}
        	drawBreadCrumb();
        },
        changeID: function(id, strId){
        	for (var uniqueId in private.visitedLinks){
        		var bc = private.visitedLinks[uniqueId];
        		if(bc.id == id) bc.id = strId;
        	}
        	drawBreadCrumb();
        },
        clear: function(){
        	private.clear = true;
        	top.objStructureTree = new emxUIStructureTree;
        	top.objDetailsTree = new emxUIDetailsTree;
        	drawBreadCrumb();
        },
        getCurrentBC: function(){
        	var currTrail = this.getCurrentBreadCrumbTrail();
        	return currTrail ? currTrail.getBreadCrumb(): null;
        },
        getFirstBC: function(){
        	var currTrail = this.getCurrentBreadCrumbTrail();
        	return currTrail ? currTrail.getBreadCrumb(1): null;
        },
        goBack: function(){
        	backInProgress = true;
        	if(this.currentPosition() > 1){
        		this.setPosition(this.currentPosition() - 1);
        	}

        	drawBreadCrumb();
        	var currTrail = this.getCurrentBreadCrumbTrail();
        	var bc =  currTrail ? currTrail.getBreadCrumb(currTrail.linksList.length): null;
        	bc ? loadBreadCrumbPage(bc.id, bc.label, bc.seperator, bc.category, bc.structureURL, bc.pageURL, true): bc ;
			if(bc.id.indexOf(".") >= 0 && top.bc) { top.bc.navigate(bc.id); }
        	backInProgress = false;
        },
        goForward: function(){
        	forwardInProgress = true;
        	if(this.currentPosition() < this.length()){
        		this.setPosition(this.currentPosition() + 1);
        	}

        	drawBreadCrumb();
        	var currTrail = this.getCurrentBreadCrumbTrail();
        	var bc =  currTrail ? currTrail.getBreadCrumb(currTrail.linksList.length): null;
        	bc ? loadBreadCrumbPage(bc.id, bc.label, bc.seperator, bc.category, bc.structureURL, bc.pageURL, true): bc ;
			if(bc.id.indexOf(".") >= 0 && top.bc) { top.bc.navigate(bc.id); }
        	forwardInProgress = false;
        }
    }

    return public;
};

function drawBreadCrumb()
{
	if(!top.isMobile){
    var bcul = top.document.getElementById('bcul');
    if(!bcul) return;
    var tempbclist = top.bclist;

    if(!tempbclist) return;

    (tempbclist.currentPosition() > 1) ? enableBackMenu1(): disableBackMenu1();
    (tempbclist.currentPosition() < tempbclist.length()) ? enableForwardMenu1(): disableForwardMenu1();
    var str = "";
    var currTrail = tempbclist.getCurrentBreadCrumbTrail();
    if(!currTrail) return;
    var bclength = currTrail.length();
    //if(!bclength) return;
    var currentPosition = currTrail.getPosition();
    var temparr = currTrail.getBreadCrumbArray();
    var it = 0;

    //while(itr.hasNext()) {
    for(var i = 0; i < bclength; i++){
        var bc = temparr[i];
        str += "<li id='liemxbc" + it +"' class='";
        if(it == currentPosition - 1){
            str += "current";
        }
        if(it == bclength - 1){
            str += " last-child";
        }
        if(bc != null) {
        	var nodeName = bc.getName();
			var labelName = bc.label;
        	try{
	        	nodeName = nodeName ? decodeURIComponent(nodeName): "";
			if(labelName) {
				if(labelName.indexOf("%") > -1 ) labelName = decodeURIComponent(labelName);
				}
        	}catch(e){
        		nodeName = bc.getName();
        		labelName = bc.label;
        	}
        	if(labelName) {
				labelName = labelName.replace(/\'/g, "\\'");
			}
        	if(it == currentPosition - 1){
        		str += "'><a onclick=\"return false\">&nbsp;" + nodeName + "</a></li>";
        	} else {
					str += "'><a href=\"javascript:loadBreadCrumbPage('" ;
					str += (bc.id ? bc.id.replace(/\'/g, "\\'") : bc.id) + "','"  ;
					str += labelName + "','" ;
					str += (bc.seperator ? bc.seperator.replace(/\'/g, "\\'") : bc.seperator) + "','" ;
					str += (bc.category ? bc.category.replace(/\'/g, "\\'") : bc.category) + "','" ;
					str += (bc.structureURL ? bc.structureURL.replace(/%27/g, "\\%27").replace(/\'/g, "\\'") : bc.structureURL) + "','" ;
					str += (bc.pageURL ? bc.pageURL.replace(/%27/g, "\\%27").replace(/\'/g, "\\'") : bc.pageURL) + "')" ;
					str += "\">&nbsp;";
					str += nodeName;
					str += "</a></li>";
			}
        }
        it++;
    }
    bcul.innerHTML = str;
    bcul.style.right = "40px";
    if(currentPosition){
        var bcli = top.document.getElementById('liemxbc' + (currentPosition - 1));
        if(bcli) {
	        if(40 - bcul.offsetLeft > bcli.offsetLeft ){
	            bcul.style.right = (bcli.offsetLeft + bcul.offsetLeft) + "px" ;
	        }
        }
    }

    var bc = currTrail.getBreadCrumb(1);
    if(bc != null) {
        var bcj = top.document.getElementById('liemxbc' + 0);
        var left_btn = top.document.getElementById('breadcrumbs_leftbutton');
        if(bcul.offsetLeft +  bcj.offsetLeft < 40){
            left_btn.className = "buttons previous";
        } else {
        	left_btn.className = "buttons previous disabled";
        }
        var right_btn = top.document.getElementById('breadcrumbs_rightbutton');
        if(parseInt(bcul.style.right) < 40){
        	right_btn.className = "buttons next";
        } else {
        	right_btn.className = "buttons next disabled";
        }
        }
    }
}

function loadBreadCrumbPage(id, label, sepearator, category, structureURL, pageURL, loadOnly, bcLabel){
	if(pageURL && pageURL.indexOf("categoryTreeName") != -1 && pageURL.indexOf("&treeLabel=") == -1){
		pageURL = pageURL+"&treeLabel="+label;
	}
	if(typeof bcLabel != "undefined" && bcLabel!=null && bcLabel!=""){
		label = bcLabel;
	}
	if(top.bclist && !loadOnly){
		top.bclist.insert(id, label, sepearator, category, structureURL, pageURL);
	}

	var currbc = top.bclist.getCurrentBC();
	structureURL = currbc && currbc.structureURL ? currbc.structureURL + "&bcSelectedId=" + currbc.selectedId : structureURL;

    var contentFrame = findFrame(top, "content");

    var strFrameInfo = "";
	 // If there is a top level Frame "topFrame" or "content" frame, then do not add "content" frame.
    if(!contentFrame){
    	strFrameInfo = "<frameset cols=\"*,0\" frameborder=\"no\" framespacing=\"0\">";
    	strFrameInfo += "<frame name=\"content\" src=\"emxBlank.jsp\" scrolling=\"auto\">";
    	strFrameInfo +="<frame name=\"hiddenTreeFrame\" noresize src=\"emxBlank.jsp\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\" frameborder=\"0\"/>";
    	strFrameInfo+="</frameset>";

    	dowrite = top.document;
    	dowrite.write(strFrameInfo);
    	dowrite.close();
    }

    contentFrame = findFrame(top, "content");
    dowrite = contentFrame.document;
    dowrite.open();

    strFrameInfo = "";
    var fsId = "emxStructureNavigatorFrame";
    if(structureURL == null || structureURL == "null") {
    	strFrameInfo = "<script>";
    	strFrameInfo += "top.objStructureTree = null;";
    	strFrameInfo += "top.objDetailsTree = null;";
    	strFrameInfo += "</script>";
    	strFrameInfo += "<frameset id=\""+fsId+"\" cols=\"0,*,0\" frameborder=\"no\" framespacing=\"0\">";
    	strFrameInfo += "<frame name=\"emxUITreeFrame\" src=\"emxBlank.jsp\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"no\"/>";
    } else {
    	strFrameInfo = "<script>";
    	strFrameInfo += "top.objStructureTree = top.initStructureTree();";
    	//strFrameInfo += "top.objStructureTree = top.initStructureTree(\"" + id + "\")";
    	strFrameInfo += "</script>";
    	strFrameInfo += "<frameset id=\""+fsId+"\" cols=\"200,*,0\">";
    	strFrameInfo += "<frame name=\"emxUITreeFrame\" src=\"" + structureURL + "\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"no\"/>";
    }

    strFrameInfo += "<frame name=\"detailsDisplay\" src=\"" + pageURL + "\" scrolling=\"auto\">";

	if (contentFrame)
	{

		   strFrameInfo+="<frame name=\"hiddenTreeContentFrame\" noresize src=\"emxBlank.jsp\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\" frameborder=\"0\"/>";
	} else {
		   strFrameInfo+="<frame name=\"hiddenTreeFrame\" noresize src=\"emxBlank.jsp\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\" frameborder=\"0\"/>";
	}
	strFrameInfo+="</frameset>";
	dowrite.write(strFrameInfo);
	dowrite.close();
}

function findMenu1(strCommand){
	return findMenufromOtherMenu1(strCommand, top.objMainToolbar);
}

function findMenufromOtherMenu1(strCommand, mainmenu){
	if (!mainmenu) return null;
    var menuLen = mainmenu.items.length;
    for(var i = 0; i < menuLen; i++){
        if(mainmenu.items[i].command == strCommand){
            return mainmenu.items[i];
        }
    }
return null;
}


/**
* disable back menu
*/
function disableBackMenu1(){
	var objBackMenu             = findMenu1("AEFBackToolbarCommand");
    if(objBackMenu && objBackMenu.element) {
	objBackMenu.element.innerHTML=objBackMenu.element.innerHTML.replace("backarrow.png","backarrowdisabled.png");
	objBackMenu.element.style.color="#cccccc";
	objBackMenu.disable();
    }
}

/**
* enable back menu
*/
function enableBackMenu1(){
	var objBackMenu             = findMenu1("AEFBackToolbarCommand");
    if(objBackMenu && objBackMenu.element) {
    	objBackMenu.element.innerHTML=objBackMenu.element.innerHTML.replace("backarrowdisabled.png","backarrow.png");
    	objBackMenu.element.style.color="#ffffff";
        objBackMenu.enable();
    }
}

/**
* disable forward menu
*/
function disableForwardMenu1(){
	var objForwardMenu          = findMenu1("AEFForwardToolbarCommand");
    if(objForwardMenu && objForwardMenu.element) {
    	objForwardMenu.element.innerHTML=objForwardMenu.element.innerHTML.replace("forwardarrow.png","forwardarrowdisabled.png");
    	objForwardMenu.element.style.color="#cccccc";
        objForwardMenu.disable();
    }
}

/**
* enable forward menu
*/
function enableForwardMenu1(){
	var objForwardMenu          = findMenu1("AEFForwardToolbarCommand");
    if(objForwardMenu && objForwardMenu.element) {
    	objForwardMenu.element.innerHTML=objForwardMenu.element.innerHTML.replace("forwardarrowdisabled.png","forwardarrow.png");
    	objForwardMenu.element.style.color="#ffffff";
        objForwardMenu.enable();
    }
}
