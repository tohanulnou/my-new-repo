/*!================================================================
 *  JavaScript Toolbar Component
 *  emxUIToolbar.js
 *  Version 1.4.2
 *  Requires: emxUICore.js, emxUICoreMenu.js
 *
 *  This file contains the definition of the toolbar for use in
 *  DOM-compliant Web browsers such as IE and Mozilla. Any page
 *  that uses this file should also link to emxUIToolbar.css
 *  for the appropriate style to show up.
 *
 *  Copyright (c) 1992-2012 Dassault Systemes. All Rights Reserved.
 *=================================================================
 */
var toolbars= new Array;
toolbars.setListLinks = function _toolbars_setListLinks(blnListLinks,uiType,SBMode) {
        for (var i=0; i < this.length; i++) {
                this[i].setListLinks(blnListLinks,uiType,SBMode);
        }
};
toolbars.init = function _toolbars_init(strID) {
    for (var i=0; i < this.length; i++) {
        if(this[i].overflow){
            this[i].overflow = false;
            this[i].items.pop();
        }
        if (i > 1){
            this[i].init("div"+i);
        }
        else{
            this[i].init(strID);
        }
    }
    //If toolbar folding occurs, then height of the toolbar frame is doubled
    if((toolbars[1] && toolbars[1].element!=null && toolbars[0].element!=null) &&
      ((toolbars[1].element.offsetWidth + toolbars[0].element.offsetWidth ) > (toolbars[1].container.offsetWidth - 8)))
    {
      //toolbars[1].container.className += " folded";
      setTimeout(function(){
        var displayFrame = findFrame(parent, "listDisplay");
        if(displayFrame != null){
          var tableElements = displayFrame.document.getElementsByName("table");
              var tableName = "";
              if(tableElements != null && tableElements[0] != null){
                tableName = tableElements[0].value;
              }
              var fs = parent.document.getElementById(tableName+"_fs");
              if(fs != null){
                var rows = parent.document.getElementById(tableName+"_fs").rows.split(",");
                  rows[0] = parseInt(rows[0]) + 21;
                  var adjustRows = rows.join(",");
                  fs.rows = adjustRows;
              }
        }

      },800);

    }
};
//! Class emxUIToolbar
//!     This object represents an toolbar.
function emxUIToolbar(blnCrossFrames,name) {
        this.superclass = emxUIObject;
        this.superclass();
        delete this.superclass;
        this.mode = 0;
        this.historyEnabled = false;
        this.emxClassName = "emxUIToolbar";
        this.items = new Array;
        this.element = null;
        this.maxWidth = emxUIToolbar.MAX_WIDTH;
        this.maxLabelChars = -1;
        this.width = -1;
        this.stylesheet = emxUIToolbar.CSS_FILE;
        toolbars[toolbars.length] = this;
        this.name=name;
        this.overflow = false;
}
emxUIToolbar.prototype = new emxUIObject;
emxUIToolbar.POS_TOP = 57;
emxUIToolbar.POS_LEFT = 10;
emxUIToolbar.DELAY_BETWEEN = 50;
emxUIToolbar.SCROLL_DISTANCE = 10;
emxUIToolbar.ICON_ONLY = 0;
emxUIToolbar.TEXT_ONLY = 1;
emxUIToolbar.ICON_AND_TEXT = 2;
emxUIToolbar.IMG_MENU_ARROW = emxUIConstants.DIR_IMAGES + "utilMenuArrow.gif";
emxUIToolbar.IMG_CHEVRON = emxUIConstants.DIR_IMAGES + "utilToolbarChevron.gif";
emxUIToolbar.CSS_FILE = emxUICore.getStyleSheet("emxUIToolbar");
emxUIToolbar.MODE_NORMAL = 0;
emxUIToolbar.MODE_FRAMES = 1;
emxUIToolbar.MODE_PORTAL = 2;
emxUIToolbar.MAX_WIDTH = -1;

// Added for Toolbar enhancement code - Begin

emxUIToolbar.INPUT_TYPE_TEXTBOX="textbox";
emxUIToolbar.INPUT_TYPE_COMBOBOX="combobox";
emxUIToolbar.INPUT_TYPE_SUBMIT="submit";
emxUIToolbar.INPUT_TYPE_CHECKBOX="checkbox";
var noOfButtons =0;





// ADDED BY TECHNIA  - TO BE ABLE TO OPEN MENU ON HOVER
emxUIToolbar.prototype.hideVisibleItems = function (cb) {
    if(isIE) {
        var doc = this.displayWindow ? this.displayWindow.document : document;
        var ieMenuCoverForObjectTag = doc.getElementById('ieMenuCoverForObjectTag');
        if(ieMenuCoverForObjectTag) doc.body.removeChild(ieMenuCoverForObjectTag);
    }
    var items = this.items;
    for(var i = 0; i < items.length;i++){
        var item = items[i];
        if(item.menu && item.menu.visible){
            item.reset();
        }
    }
    if(cb){
        cb();
    }
}
// END ADDED BY TECHNIA





// Added for Toolbar enhancement code - End

//! Public Method emxUIToolbar.addItem()
//!     This method adds an item to the toolbar.
emxUIToolbar.prototype.addItem = function _emxUIToolbar_addItem(objItem, blnListLink) {
        this.items.push(objItem);
        objItem.parent = this;
        objItem.listLink = !!blnListLink;
        objItem.toolbar = this;
        return objItem;
};

emxUIToolbar.prototype.drawToolbar = function _emxUIToolbar_drawToolbar(div) {

   var divToolbar = document.getElementById(div);
   if(!divToolbar){
    return;
   }

   if(this.overflow){
        this.overflow = false;
        while(this.items[this.items.length-1].emxClassName == 'emxUIToolbarOverflowButton') {
            this.items.pop();
        }
   }

   var frmvalmap = new HashMap();
   var inpelems = document.getElementsByTagName("input");
   for(var k = 0; k < inpelems.length; k++){
        if(inpelems[k].type == "hidden" || inpelems[k].type == "textbox" || inpelems[k].type == "text") {
            frmvalmap.Put(inpelems[k].name, inpelems[k].value);
        }
   }

   divToolbar.innerHTML = "";

   $('div.mmenu').remove();
   $('div.toolbar-container').html("<div id='divToolbar' class='toolbar-frame'></div>");

   this.init(div);
   inpelems = document.getElementsByTagName("input");
   for(var n = 0; n < inpelems.length; n++){
        if(inpelems[n].type == "hidden" || inpelems[n].type == "textbox" || inpelems[n].type == "text") {
            inpelems[n].value = frmvalmap.Get(inpelems[n].name);
        }
   }
};

//! Private Method emxUIToolbar.createDOM()
//!     This method creates the DOM representation of the toolbar.
emxUIToolbar.prototype.createDOM = function _emxUIToolbar_createDOM() {
        if (!this.container) {
                throw new Error("No container element specified. (emxUIToolbar.prototype.createDOM)");
        }
        var isGlobalToolbar = false;
        try{
            isGlobalToolbar = this.container.parentNode.id == "globalToolbar";
    }catch(ex){
    	//do nothing
    }
    if(isGlobalToolbar){
    	return this.createGlobalToolbarDOM();
    }
        this.maxWidth = this.width == -1 ? -1 : this.width * this.container.offsetWidth;
        this.element = document.createElement("div");
        this.element.className = "toolbar";
        if (this.container.firstChild && this.container.firstChild.nodeType != 1) {
                this.container.innerHTML = "";
        }

        this.container.appendChild(this.element);
        var objTable = document.createElement("table");
        objTable.border = 0;
        objTable.cellPadding = 0;
        objTable.cellSpacing = 0;
        objTable.height = "100%";
        this.element.appendChild(objTable);
        var objTBody = document.createElement("tbody");
        objTable.appendChild(objTBody);
        var objTR = document.createElement("tr");
        objTBody.appendChild(objTR);
        var overflow_button = null;
        for (var i = 0; i < this.items.length; i++) {
            this.items[i].init(objTR);
            if ((objTable.offsetWidth != 0 && objTable.offsetWidth >= this.maxWidth && this.maxWidth != -1)
                    || (this.container.offsetWidth - (this.element.offsetLeft < 10 ? 120 : 65)) < this.element.offsetLeft + this.element.offsetWidth) {

                if (this.items[i].element) {
			if(this.items[i].id!="AEFGenericDelete" && this.items[i].dynamicName != "AEFFullSearchSave" && this.items[i].dynamicName!="AEFFullSearchCollection"){
                    objTR.removeChild(this.items[i].element);
                    this.items[i].element = null;
                    overflow_button = new emxUIToolbarOverflowButton();
                    this.addItem(overflow_button);
                    overflow_button.addMenu(new emxUIToolbarMenu);
                    this.overflow = true;

                    for (var j = i; j < this.items.length - 1; j++) {
                    	if(this.items[j].id == "editButttonId"){
                    		this.items[j].element = null;
                    	}                    	
                        overflow_button.menu.addItem(this.items[j].toMenuItem(), this.items[j].listlink);
                        //To set Mode for items in OverflowButton[Added to support Structure Browser - Edit Mode Toolbar]
                        var item = overflow_button.menu.items[j - i];
                        item.setMode(this.items[j].getMode());
                        if (this.items[j].command == "AEFBackToolbarMenu" || this.items[j].command == "AEFForwardToolbarMenu") {
                            item.enabled = false;
                        }
                    }
                    overflow_button.init(objTR);
                    objTR.appendChild(overflow_button.element);
                    break;
                }
            }
        }
        }
    addEvent(this.element, "contextmenu", cancelEvent);
};
//! Private Method emxUIToolbar.createGlobalToolbarDOM()
//!     This method creates the DOM representation of the global toolbar.
emxUIToolbar.prototype.createGlobalToolbarDOM = function _emxUIToolbar_createGlobalToolbarDOM() {
	if (!this.container) {
		throw new Error(
				"No container element specified. (emxUIToolbar.prototype.createGlobalToolbarDOM)");
            }
	
	this.maxWidth = this.width == -1 ? -1 : this.width * this.container.offsetWidth;
    if (this.container.firstChild && this.container.firstChild.nodeType != 1) {
            this.container.innerHTML = "";
        }

	var toolbar_template = function(group){
		var str = '<div class="toolbar '+ group +'"><table><tr></tr></table></div>';
		return $(str).get(0);
	};
	
	$(this.container)
			.append(toolbar_template("group-left"))
			.append(toolbar_template("group-center"))
			.append(toolbar_template("group-right"));

	var left_width = $('.group-left').width();
	var center_width = $('.group-center').width();
	var right_width = $('.group-right').width();

	this.container_left 	= $('.group-left').get(0);
	this.container_center 	= $('.group-center').get(0);
	this.container_right 	= $('.group-right').get(0);

	var toolbar_section = {
		left : {
			element : this.container_left,
			overflow_button : null,
			table_row : $('table tr', this.container_left).get(0),
			maxWidth : left_width
		},
		center : {
			element : this.container_center,
			overflow_button : null,
			table_row : $('table tr', this.container_center).get(0),
			maxWidth : center_width
		},
		right : {
			element : this.container_right,
			overflow_button : null,
			table_row : $('table tr', this.container_right).get(0),
			maxWidth : right_width
		}
	};

	var cmdname = null, toolbar_alignment = null, toolbar_group = null,
		current_section = null, current_section_row = null,
		itemLength = this.items.length, overflow_icon_width = 20;

	for ( var i = 0; i < itemLength; i++) {
		cmdname = this.items[i].text;
		toolbar_alignment = this.items[i].getAlignment();// this item's alignment
		current_section = toolbar_section[toolbar_alignment];// the section object
		toolbar_group = current_section.element;// the TD element from this section
		current_section_row = current_section.table_row;// the row that we're adding items to
		this.items[i].init(current_section_row);

		if (!!current_section.overflow_button
				|| current_section_row.offsetWidth-overflow_icon_width > current_section.maxWidth) {
			if (this.items[i].element) {
				current_section_row.removeChild(this.items[i].element);
				this.items[i].element = null;
				if (!current_section.overflow_button) {
					current_section.overflow_button = new emxUIToolbarOverflowButton();
					this.addItem(current_section.overflow_button);
					current_section.overflow_button.addMenu(new emxUIToolbarMenu);
				}
				this.overflow = true;
				current_section.overflow_button.menu
					.addItem(this.items[i].toMenuItem(), this.items[i].listlink);
			}
		}
            }
	for(var key in toolbar_section){
		if (!!toolbar_section[key].overflow_button) {
			toolbar_section[key].overflow_button.init(toolbar_section[key].table_row);
			toolbar_section[key].table_row
					.appendChild(toolbar_section[key].overflow_button.element);
            }
        }

	addEvent(this.container, "contextmenu", cancelEvent);
};
//! Public Method emxUIToolbar.init()
//!     This method draws the actionbar. It should be called in
//!     the page
emxUIToolbar.prototype.init = function _emxUIToolbar_init(strContainerID) {
        if (this.items.length == 0) return;
        this.container = document.getElementById(strContainerID);

        /*
		 * This if condition is added for issue with APPImageManager. In
		 * emxImageManager.jsp user is adding controls to the objMainTollbar
		 * explicitely in the code and passing toolbar parameter. Start
        */
        if (this.name == "context"  && !this.container) {
            this.container = document.getElementById("divToolbar");
        }
        //End
        if ( (this.name == "context" || this.name == "main") && !this.container) {
            throw new Error("DOM element with ID '" + strContainerID + "' not found. (emxUIToolbar.js::emxUIToolbar.prototype.init)");
        }
        else if (!this.container) {
          var divCustomToolbarContainer = document.createElement("div");
            divCustomToolbarContainer.setAttribute("id","Container"+this.name);
            divCustomToolbarContainer.className = "toolbar-container";
      document.getElementById("divToolbarContainer").parentNode.appendChild(divCustomToolbarContainer);

            var customElement = document.createElement("div");
            customElement.setAttribute("id",this.name);
            customElement.className = "toolbar-frame";
            divCustomToolbarContainer.appendChild(customElement);
            this.container = customElement;
        }
        this.createDOM();
};
//! Private Method emxUIToolbar.setListLinks()
//!     This method enables/disables list links.
emxUIToolbar.prototype.setListLinks = function _emxUIToolbar_setListLinks(blnListLink,uiType,SBMode) {
        for (var i=0; i < this.items.length; i++) {
          var doIgnoreRowSelect = true;
      if(typeof uiType !='undefined' && uiType =='structureBrowser' &&
         typeof SBMode !='undefined' && (this.items[i].Mode!='' && this.items[i].Mode != SBMode)){
        doIgnoreRowSelect = false;
      }
      if(doIgnoreRowSelect){
                if (this.items[i].listLink) {
                        if (blnListLink) {
                                this.items[i].enable();
                        } else {
                                this.items[i].disable();
                        }
                }
                if (this.items[i].setListLinks) {
                        this.items[i].setListLinks(blnListLink,uiType,SBMode);
                }
          }
        }
};
//! Protected Method emxUIToolbar.setMaxLabelChars()
//!     This method sets the maximum label characters of a button.
emxUIToolbar.prototype.setMaxLabelChars = function _emxUIToolbar_setMaxLabelChars(intLength) {
        this.maxLabelChars = intLength;
};
//! Public Method emxUIToolbar.setWidth()
//!     This method sets the width of the toolbar.
emxUIToolbar.prototype.setWidth = function _emxUIToolbar_setWidth(fltWidth) {
        if (typeof fltWidth == "string") {
                this.width = parseInt(fltWidth)/100;
        } else {
                this.width = fltWidth;
        }
};
//! Class emxUICoreToolbarItem
//!     This object represents an item on a toolbar. This class is
//!     not intended to be instantiated directly, but rather is used
//!     as a base class for others to extend.
function emxUICoreToolbarItem() {
        this.superclass = emxUIObject;
        this.superclass();
        delete this.superclass;
        this.element = null;
        this.emxClassName = "emxUICoreToolbarItem";
        this.index = -1;
        this.parent = null;
        this.uniqueID = emxUICore.getUniqueID();
        this.listLink = false;
        this.toolbar = null;
        this.grayout = false;
        this.strAlignment = "left";
}
emxUICoreToolbarItem.prototype = new emxUIObject;
//! Private Method emxUICoreToolbarItem.createDOM()
//!     This methods creates the DOM for the item.
emxUICoreToolbarItem.prototype.createDOM = function _emxUICoreToolbarItem_createDOM(objParent) {
        this.element = document.createElement("td");
        this.element.setAttribute("itemID", this.uniqueID);
        if(this.id) {
            this.element.setAttribute("id", this.id);
        }
        var objThis = this;
        addEvent(this.element, "click", function () { objThis.fireEvent("click"); });
        addEvent(this.element, "mouseover", function () { objThis.fireEvent("mouseover"); });
        addEvent(this.element, "mouseout", function () { objThis.fireEvent("mouseout"); });
        addEvent(this.element, "mouseup", function () { objThis.fireEvent("mouseup"); });
        addEvent(this.element, "mousedown", function () { objThis.fireEvent("mousedown"); });

        this.clearEventHandlers("click");
        this.clearEventHandlers("mouseover");
        this.clearEventHandlers("mouseout");
        this.clearEventHandlers("mouseup");
        this.clearEventHandlers("mousedown");

        this.registerEventHandler("click", function () { objThis.handleEvent("click"); });
        this.registerEventHandler("mouseover", function () { objThis.handleEvent("mouseover"); });
        this.registerEventHandler("mouseout", function () { objThis.handleEvent("mouseout"); });
        this.registerEventHandler("mouseup", function () { objThis.handleEvent("mouseup"); });
        this.registerEventHandler("mousedown", function () { objThis.handleEvent("mousedown"); });
        objParent.appendChild(this.element);
};
//! Private Method emxUICoreToolbarItem.handleEvent()
//!     This method handles the events for this object.
emxUICoreToolbarItem.prototype.handleEvent = function _emxUICoreToolbarItem_handleEvent(strType) {
};
//! Private Method emxUICoreToolbarItem.init()
//!     This method initializes the item.
emxUICoreToolbarItem.prototype.init = function _emxUICoreToolbarItem_init(objParent) {
        this.createDOM(objParent);
};
//! Private Method emxUICoreToolbarItem.reset()
//!     This methods resets the item to its original view.
emxUICoreToolbarItem.prototype.reset = function _emxUICoreToolbarItem_reset() {
};
//! Private Method emxUICoreToolbarItem.getAlignment()
//!     This methods gets the alignment attribute for the item.
emxUICoreToolbarItem.prototype.getAlignment = function _emxUICoreToolbarItem_getAlignment() {
	return this.strAlignment || "left";
};
//! Private Method emxUICoreToolbarItem.toMenuItem()
//!     This method returns a menu item for this toolbar item.
emxUICoreToolbarItem.prototype.toMenuItem = function _emxUICoreToolbarItem_toMenuItem() {
};
//! Class emxUIToolbarButton
function emxUIToolbarButton (intFormat, strIcon, strText, strURL, strTarget,
                                strMenu, strCommand, strCommandTitle, strLinkType,
                                intWidth, intHeight, strSuite, blnHistoryEnabled, 
                                intLabelLength, strId,strJPOName, strMethodName, strName, strAlignment) {
        this.superclass = emxUICoreToolbarItem;
        this.superclass();
        delete this.superclass;
        this.cssClass = "";
        this.emxClassName = "emxUIToolbarButton";
        this.format = intFormat;
        this.icon = strIcon == null ? null : emxUICore.getIcon(strIcon);
        this.menu = null;
        this.menuDir = "down";
        this.target = strTarget;
        this.text = strText;
        this.url = strURL;
        this.historyEnabled = blnHistoryEnabled;
        this.linkMenu = strMenu;
        this.command = strCommand;
        this.commandTitle = strCommandTitle;
        this.linkType = strLinkType;
        this.linkWidth = intWidth;
        this.linkHeight = intHeight;
        this.suite = strSuite;
        this.labelLength = intLabelLength;
        this.id = strId;
      this.dynamicJPO = strJPOName;
    this.dynamicMethod = strMethodName;
    this.dynamicName = strName;
    this.strAlignment = strAlignment
    this.disableOnClick = false; //Added by Autoliv to disable the button on clicking(Example : Promote button), default is false.
}
emxUIToolbarButton.prototype = new emxUICoreToolbarItem;
//! Private Method emxUIToolbarButton.addMenu()
//!     This method assigns a menu to the toolbar.
emxUIToolbarButton.prototype.addMenu = function _emxUIToolbarButton_addMenu(objMenu) {
        if (!this.parent) {
                throw new Error("Toolbar button must be added to a toolbar before a menu can be added. (emxUIToolbar.js::emxUIToolbarButton.prototype.addMenu)");
        }
        this.menu = objMenu;
    //For Commands and Menus directly on toolbar and Dynamic property to the associated menu
        if(this.dynamicJPO != "undefined" && this.dynamicJPO != null)
        {
          objMenu.dynamicJPO = this.dynamicJPO;
          objMenu.dynamicMethod = this.dynamicMethod;
          objMenu.dynamicName = this.dynamicName;
        }
        objMenu.historyEnabled = this.parent.historyEnabled;
        if (this.parent.mode == emxUIToolbar.MODE_FRAMES) {
                var blnDone = false;
                for (var i=0; i < parent.frames.length && !blnDone; i++) {
                        if (parent.frames[i] == self) {
                                this.menu.displayWindow = parent.frames[i+1];
                                blnDone = true;
                        }
                }
        }
};
//! Private Method emxUIToolbarButton.createDOM()
//!     This methods creates the DOM for the item.
emxUIToolbarButton.prototype.emxUIToolbarItemCreateDOM = emxUIToolbarButton.prototype.createDOM;
emxUIToolbarButton.prototype.createDOM = function _emxUIToolbarButton_createDOM(objParent) {
        var strDisplayText = this.text.htmlDecode();

        //labelLength comes from the command setting and has precedence over maxLabelChars
        if(this.labelLength != null && this.labelLength > 0){
            if (strDisplayText.length > this.labelLength) {
                    strDisplayText = strDisplayText.substring(0, Math.min(this.labelLength, strDisplayText.length)) + "...";
            }
        }else{
            if (this.parent.maxLabelChars > -1 && strDisplayText.length > this.parent.maxLabelChars) {
                    strDisplayText = strDisplayText.substring(0, Math.min(this.parent.maxLabelChars, strDisplayText.length)) + "...";
            }
        }
        strDisplayText = strDisplayText.htmlEncode();
        var distext = strDisplayText;
        //combination button
        if (this.url && this.menu) {
                this.buttonElement = document.createElement("td");
                this.menuElement = document.createElement("td");
                this.buttonElement.title = this.menuElement.title = this.text.htmlDecode();
                this.menuElement.innerHTML = "<img src=\"" + emxUIToolbar.IMG_MENU_ARROW + "\" border=\"0\" />";
                this.menuElement.className = "menu-arrow";

                switch(this.format) {
                        case emxUIToolbar.ICON_AND_TEXT:
                                this.buttonElement.className = "icon-and-text-button combo-button";
                                this.buttonElement.innerHTML = "<img src=\"" + this.icon + "\"/>" + distext;
                                break;
                        case emxUIToolbar.TEXT_ONLY:
                                this.buttonElement.className = "text-button combo-button";
                                this.buttonElement.innerHTML = strDisplayText;
                                break;
                        case emxUIToolbar.ICON_ONLY:
                                this.buttonElement.className = "icon-button combo-button";
                                this.buttonElement.innerHTML = "&nbsp;";
                                this.buttonElement.innerHTML = "<img src=\"" + this.icon + "\"/>";
                                break;
                }
                var objThis = this;
                addEvent(this.buttonElement, "click", function () { objThis.fireEvent("button-click"); });
                addEvent(this.buttonElement, "mouseover", function () { objThis.fireEvent("mouseover"); });
                addEvent(this.buttonElement, "mouseout", function () { objThis.fireEvent("mouseout"); });
                addEvent(this.buttonElement, "mouseup", function () { objThis.fireEvent("button-mouseup"); });
                addEvent(this.buttonElement, "mousedown", function () { objThis.fireEvent("button-mousedown"); });

                addEvent(this.menuElement, "click", function () { objThis.fireEvent("menu-click"); });
                addEvent(this.menuElement, "mouseover", function () { objThis.fireEvent("mouseover"); });
                addEvent(this.menuElement, "mouseout", function () { objThis.fireEvent("mouseout"); });
                addEvent(this.menuElement, "mouseup", function () { objThis.fireEvent("menu-mouseup"); });
                addEvent(this.menuElement, "mousedown", function () { objThis.fireEvent("menu-mousedown"); });

                this.clearEventHandlers("button-click");
                this.clearEventHandlers("button-mouseup");
                this.clearEventHandlers("button-mousedown");
                this.clearEventHandlers("menu-click");
                this.clearEventHandlers("mouseover");
                this.clearEventHandlers("mouseout");
                this.clearEventHandlers("menu-mouseup");
                this.clearEventHandlers("menu-mousedown");

                this.registerEventHandler("button-click", function () {objThis.handleEvent("button-click");});
                this.registerEventHandler("button-mouseup", function () {objThis.handleEvent("button-mouseup");});
                this.registerEventHandler("button-mousedown", function () {objThis.handleEvent("button-mousedown");});
                this.registerEventHandler("menu-click", function () {objThis.handleEvent("menu-click");});
                this.registerEventHandler("mouseover", function () {objThis.handleEvent("mouseover");});
                this.registerEventHandler("mouseout", function () {objThis.handleEvent("mouseout");});
                this.registerEventHandler("menu-mouseup", function () {objThis.handleEvent("menu-mouseup");});
                this.registerEventHandler("menu-mousedown", function () {objThis.handleEvent("menu-mousedown");});
                objParent.appendChild(this.buttonElement);
                objParent.appendChild(this.menuElement);
        } else {
                this.emxUIToolbarItemCreateDOM(objParent);
                this.element.title = this.text.htmlDecode();
                this.element.noWrap = "nowrap";
                switch(this.format) {
                        case emxUIToolbar.ICON_AND_TEXT:
                                var w = 16;
                                var cName = "icon-and-text-button";
                            if(this.icon.indexOf("3dsButton")!= -1){
                                    w = 24;
                                    strDisplayText = "";
                                    cName += " icon-and-text-button-ds-logo";
                            }
                                this.element.className = cName;
                                if (this.menu) {
                                        this.element.innerHTML = "<img src=\"" + this.icon + "\"/>" + distext + "&nbsp;<img src=\"" + emxUIToolbar.IMG_MENU_ARROW + "\"/>";
                                } else {
                                        this.element.innerHTML = "<img src=\"" + this.icon + "\"/>" + distext;
                                }
                                break;
                        case emxUIToolbar.TEXT_ONLY:
                                this.element.className = "text-button";
                                if (this.menu) {
                                        this.element.innerHTML = strDisplayText + "&nbsp;<img src=\"" + emxUIToolbar.IMG_MENU_ARROW + "\"/>";
                                } else {
                                        this.element.innerHTML = strDisplayText;
                                }
                                break;
                        case emxUIToolbar.ICON_ONLY:
                                this.element.className = "icon-button";
                                this.element.innerHTML = "&nbsp;";
                                if (this.menu) {
                                        this.element.innerHTML = "<img src=\"" + this.icon + "\"/>&nbsp;<img src=\"" + emxUIToolbar.IMG_MENU_ARROW + "\"/>";
                                } else {
                                        this.element.innerHTML = "<img src=\"" + this.icon + "\"/>";
                                }
                                break;
                }
                if(this.command == 'AEFCompassHolder'){
					this.element.className = "compass-placeholder";
					this.element.innerHTML = "<span></span>";
					this.element.title = "";
                }
        }
        if(this.grayout == "true"){
          this.disable();
        }
};
//! Private Method emxUIToolbarButton.handleEvent()
//!     This method handles the events for this object.
emxUIToolbarButton.prototype.handleEvent = function _emxUIToolbarButton_handleEvent(strType) {
        if (this.menu && this.url) {
                switch(strType) {
                        case "mouseover":
                                emxUICore.addClass(this.buttonElement, "button-hover");
                                emxUICore.addClass(this.menuElement, "button-hover");
                                break;
                        case "mouseout":
                                if (!this.menu.visible) {
                                        this.reset();
                                }
                                break;
                        case "button-click":
                                emxUICore.removeClass(this.buttonElement, "button-hover");
                                emxUICore.removeClass(this.menuElement, "button-hover");
                                emxUICore.addClass(this.buttonElement, "button-active");
                                emxUICore.addClass(this.menuElement, "button-active");
                                if (this.parent.historyEnabled && this.historyEnabled) {
                                        emxUICore.addToPageHistory(this.suite,this.url,this.linkMenu,this.command,this.target,this.commandTitle,this.linkType,this.linkWidth,this.linkHeight);
                                }
                                emxUICore.link(this.url, this.target);
                                emxUICore.removeClass(this.buttonElement, "button-active");
                                emxUICore.removeClass(this.menuElement, "button-active");
                                break;
                        case "button-mousedown":
                                emxUICore.removeClass(this.buttonElement, "button-hover");
                                emxUICore.addClass(this.buttonElement, "button-active");
                                emxUICore.removeClass(this.menuElement, "button-hover");
                                emxUICore.addClass(this.menuElement, "button-active");
                                break;
                        case "button-mouseup":
                                emxUICore.removeClass(this.buttonElement, "button-active");
                                emxUICore.removeClass(this.menuElement, "button-active");
                                break;
                        case "menu-click":
                                emxUICore.removeClass(this.menuElement, "button-hover");
                                emxUICore.addClass(this.menuElement, "button-active");
                                this.menu.show(this.buttonElement, this.menuDir);
                                break;
                }
        } else if (this.menu) {
                switch(strType) {
                        case "mouseover":
                                // MODIFIED BY TECHNIA - OPEN TOOLBAR ON HOVER
                                if (!this.menu.visible) {
                                    if(this.toolbar.container.parentNode.id == "globalToolbar"){
                                        var that = this;
                                        this.toolbar.hideVisibleItems(function () {
                                            emxUICore.addClass(that.element, "menu-button-active");
                                            that.menu.show(that.element, that.menuDir);
                                        });

                                    }
                                }
                                break;
                        case "mouseout":
                                if (!this.menu.visible) {
                                    this.reset();
                                }

                                    if(this.toolbar.container.parentNode.id == "globalToolbar") {
                                        // MODIFIED BY TECHNIA - To hide menucontent on mouseleave
                                        var that = this;
                                        // MODIFIED TO FIX THE MOUSE OUT ISSUE in APP
                                        if (this.toolbar.container.parentNode.accessKey !== "app") {
                                            setTimeout(function () {
                                                var isHoverMenuContent = $(that.menu.menucontent).is(':hover');

                                                if (!isHoverMenuContent) {
                                                    that.reset();
                                                }
                                            }, 300);
                                        }

                                        $(this.menu.menucontent).mouseleave(function () {
                                            that.reset();
                                        });
                                    }
                                break;
                        case "click":
                                emxUICore.removeClass(this.element, "button-hover");
                                emxUICore.addClass(this.element, "menu-button-active");
                                this.menu.show(this.element, this.menuDir);
                }
        } else {
                switch(strType) {
                        case "mouseover":
                                emxUICore.addClass(this.element, "button-hover");
                                break;
                        case "mouseout":
                                this.reset();
                                break;
                        case "click":
                            if(this.command == "AEFHomeToolbar"){
                                top.bclist.clear();
                            }
                                                    //Added by Autoliv to disable the button on clicking(Example : Promote button), if setting "Disable On Click" is added to the command. - Change
                            if(this.disableOnClick == "true"){
                                this.disable();
                            }

                            if(this.url.indexOf("javascript:showPageURL(") < 0){
                                if (this.parent.historyEnabled && this.historyEnabled) {
                                    emxUICore.addToPageHistory(this.suite,this.url,this.linkMenu,this.command,this.target,this.commandTitle,this.linkType,this.linkWidth,this.linkHeight);
                                }
                                  emxUICore.link(this.url, this.target);
                                }else{
                                  var objThis = this;
                                  showPageURL(objThis);
                                }

                                break;
                        case "mousedown":
                                emxUICore.removeClass(this.element, "button-hover");
                                emxUICore.addClass(this.element, "button-active");
                                break;
                        case "mouseup":
                                emxUICore.removeClass(this.element, "button-active");
                                break;
                }
        }
};
//! Private Method emxUIToolbarButton.init()
//!     This method initializes the item.
emxUIToolbarButton.prototype.init = function _emxUIToolbarButton_init(objParent) {
        this.createDOM(objParent);
        if (this.menu) {
                this.menu.init();
                var objThis = this;
                this.menu.clearEventHandlers("hide");
                this.menu.registerEventHandler("hide", function () { objThis.reset(); });
        }
};
//! Private Method emxUIToolbarButton.disable()
//!     This method disables the button.
emxUIToolbarButton.prototype.emxUICoreToolbarItemDisable = emxUIToolbarButton.prototype.disable;
emxUIToolbarButton.prototype.disable = function _emxUIToolbarButton_disable() {
        this.emxUICoreToolbarItemDisable();
        if (this.element) {
                if (this.url && this.menu) {
                        emxUICore.addClass(this.buttonElement, "button-disabled");
                        emxUICore.addClass(this.menuElement, "button-disabled");
                } else {
                        emxUICore.addClass(this.element, "button-disabled");
                }
        }
        //for graying Menu with href when it is disabled[Added to support Structure Browser - Edit Mode Toolbar]
         if (this.buttonElement)
         {
          emxUICore.addClass(this.buttonElement, "button-disabled");
         }
};
//! Private Method emxUIToolbarButton.enable()
//!     This method enables the button.
emxUIToolbarButton.prototype.emxUICoreToolbarItemEnable = emxUIToolbarButton.prototype.enable;
emxUIToolbarButton.prototype.enable = function _emxUIToolbarButton_enable() {
        this.emxUICoreToolbarItemEnable();
        if (this.element) {
                if (this.menu && this.url) {
                        emxUICore.removeClass(this.buttonElement, "button-disabled");
                        emxUICore.removeClass(this.menuElement, "button-disabled");
                } else {
                        emxUICore.removeClass(this.element, "button-disabled");
                }
        }
        //To Undo graying Menu with href when it is enabled[Added to support Structure Browser - Edit Mode Toolbar]
         if (this.buttonElement)
         {
          emxUICore.removeClass(this.buttonElement, "button-disabled");
         }
};
//! Private Method emxUIToolbarButton.reset()
//!     This methods resets the item to its original view.
emxUIToolbarButton.prototype.reset = function _emxUIToolbarButton_reset() {
        if (this.menu && this.url) {
                emxUICore.removeClass(this.buttonElement, "button-hover");
                emxUICore.removeClass(this.buttonElement, "button-active");
                emxUICore.removeClass(this.menuElement, "button-hover");
                emxUICore.removeClass(this.menuElement, "button-active");
        } //modified for bug : 345627
        else if(this.element != null) {
                emxUICore.removeClass(this.element, "button-hover");
                emxUICore.removeClass(this.element, "button-active");
                emxUICore.removeClass(this.element, "menu-button-active");
        }
        if (this.menu && this.menu.visible) {
                var doc = this.displayWindow ? this.displayWindow.document : document;
                var ieMenuCoverForObjectTag = doc.getElementById('ieMenuCoverForObjectTag');
                if(ieMenuCoverForObjectTag) doc.body.removeChild(ieMenuCoverForObjectTag);
                this.menu.hide();
        }
};
//! Private Method emxUIToolbarButton.setListLinks()
//!     This method enables/disables list links.
emxUIToolbarButton.prototype.setListLinks = function _emxUIToolbarButton_setListLinks(blnListLink,uiType,SBMode) {
        if (this.menu) {
                this.menu.setListLinks(blnListLink,uiType,SBMode);
        }
};
//! Private Method emxUIToolbarButton.toMenuItem()
//!     This method returns a menu item for this toolbar item.
emxUIToolbarButton.prototype.toMenuItem = function _emxUIToolbarButton_toMenuItem() {
    var isHTMLControl = this.hasOwnProperty("htmlControl");
    var htmlType = (isHTMLControl)?this.htmlControl:'';
    var fieldName = (this.formFieldName)?this.formFieldName:'';
        var objItem = new emxUIToolbarMenuItem(emxUIToolbar.ICON_AND_TEXT, this.icon, this.text, this.url, this.target, "", this.command, "", "", "", "", "", "", "", "", "",isHTMLControl, htmlType, fieldName);
        if (this.menu) {
                objItem.addMenu(this.menu);
        }
        return objItem;
};
//! Private Class emxUIToolbarOverflowButton
//!     This object should not be instantiated directly.
function emxUIToolbarOverflowButton () {
        this.superclass = emxUIToolbarButton;
        this.superclass(emxUIToolbar.ICON_ONLY, "", "");
        delete this.superclass;
        this.emxClassName = "emxUIToolbarOverflowButton";
        this.menuDir = "down-left";
        this.command = "emxUIToolbarOverflowButton";
        this.url = "";
}
emxUIToolbarOverflowButton.prototype = new emxUIToolbarButton;
//! Private Method emxUIToolbarOverflowButton.createDOM()
//!     This methods creates the DOM for the item.
//!     (none)
//!     The DOM element representing this toolbar item.
emxUIToolbarOverflowButton.prototype.createDOM = function _emxUIToolbarOverflowButton_createDOM(objParent) {
        this.emxUIToolbarItemCreateDOM(objParent);
        this.element.noWrap = "nowrap";
        this.element.className = "overflow-button";
        this.element.innerHTML = "<img src=\"" + emxUIToolbar.IMG_CHEVRON + "\" alt=\"\">";
};
//! Class emxUIToolbarSeparator
function emxUIToolbarSeparator () {
        this.superclass = emxUICoreToolbarItem;
        this.superclass();
        delete this.superclass;
        this.emxClassName = "emxUIToolbarSeparator";
}
emxUIToolbarSeparator.prototype = new emxUICoreToolbarItem;
//! Private Method emxUIToolbarSeparator.createDOM()
//!     This methods creates the DOM for the item.
//!     (none)
//!     The DOM element representing this menu item.
emxUIToolbarSeparator.prototype.emxUIToolbarItemCreateDOM = emxUIToolbarSeparator.prototype.createDOM;
emxUIToolbarSeparator.prototype.createDOM = function _emxUIToolbarSeparator_createDOM(objParent) {
        this.emxUIToolbarItemCreateDOM(objParent);
        this.element.innerHTML = "<div class=\"separator\"></div>";
};
//! Private Method emxUIToolbarSeparator.toMenuItem()
//!     This method returns a menu item for this toolbar item.
emxUIToolbarSeparator.prototype.toMenuItem = function _emxUIToolbarSeparator_toMenuItem() {
        return new emxUIToolbarMenuSeparator();
};
//! Class emxUIToolbarMenu
//!     This object represents a menu.
function emxUIToolbarMenu() {
        this.superclass = emxUICorePopupMenu;
        this.superclass();
        delete this.superclass;
        this.toolbar = null;
        this.emxClassName = "emxUIToolbarMenu";
}
emxUIToolbarMenu.prototype = new emxUICorePopupMenu;
//! Protected Method emxUIToolbarMenu.addItem()
//!     This method adds an item to the menu.
emxUIToolbarMenu.prototype.emxUICorePopupMenuAddItem = emxUIToolbarMenu.prototype.addItem;
emxUIToolbarMenu.prototype.addItem = function _emxUIToolbarMenu_addItem(objItem, blnListLink) {
        objItem.listLink = !!blnListLink;
    if(objItem.text == emxUIConstants.STR_LOADING_MENU)
        {
        //If a Sub Menu Item is dynamic,Dynamic setting is added to the parent Menu
      if (this.parent != null)
      {
           this.parent.menu.dynamicJPO = objItem.dynamicJPO;
         this.parent.menu.dynamicMethod = objItem.dynamicMethod;
         this.parent.menu.dynamicName = objItem.dynamicName;
      }
      else
      {
          this.dynamicJPO = objItem.dynamicJPO;
          this.dynamicMethod = objItem.dynamicMethod;
        this.dynamicName = objItem.dynamicName;
      }
        }
       return this.emxUICorePopupMenuAddItem(objItem);
};
//! Private Method emxUIToolbarMenu.setListLinks()
//!     This method enables/disables list links.
emxUIToolbarMenu.prototype.setListLinks = function _emxUIToolbarMenu_setListLinks(blnListLink,uiType,SBMode) {
        for (var i=0; i < this.items.length; i++) {
          var doIgnoreRowSelect = true;
      if(typeof uiType !='undefined' && uiType =='structureBrowser' &&
         typeof SBMode !='undefined' && (this.items[i].Mode!='' && this.items[i].Mode != SBMode)){
        doIgnoreRowSelect = false;
      }
      if(doIgnoreRowSelect){
                if (this.items[i].listLink) {
                        if (blnListLink) {
                                this.items[i].enable();
                        } else {
                                this.items[i].disable();
                        }
                }
                if (this.items[i].menu) {
                        this.items[i].menu.setListLinks(blnListLink,uiType,SBMode);
                }
      }
        }
};
//! Class emxUIToolbarMenuSeparator
//!     This object represents a menu separator.
function emxUIToolbarMenuSeparator() {
        this.superclass = emxUICoreMenuSeparator;
        this.superclass();
        delete this.superclass;
        this.emxClassName = "emxUIToolbarMenuSeparator";
}
emxUIToolbarMenuSeparator.prototype = new emxUICoreMenuSeparator;
//! Class emxUIToolbarMenuItem
function emxUIToolbarMenuItem (intFormat, strIcon, strText, strURL, strTarget,
                                strMenu, strCommand, strCommandTitle, strLinkType,
                                intWidth, intHeight, strSuite, blnHistoryEnabled,strJPOName, strMethodName,strName,
                                 isHTMLControl, htmlType, fieldName) {
        this.superclass = emxUICoreMenuLink;
        this.superclass((intFormat == emxUIToolbar.ICON_AND_TEXT ? strIcon : null), strText, strURL, strTarget);
        delete this.superclass;
        this.emxClassName = "emxUIToolbarMenuItem";
        this.format = intFormat;
        this.linkMenu = strMenu;
        this.command = strCommand;
        this.commandTitle = strCommandTitle;
        this.linkType = strLinkType;
        this.linkWidth = intWidth;
        this.linkHeight = intHeight;
        this.suite = strSuite;
        this.historyEnabled = blnHistoryEnabled;
        this.dynamicJPO = strJPOName;
        this.dynamicMethod = strMethodName;
        this.dynamicName = strName;
        this.isHTMLControl = isHTMLControl;
        this.htmlType = htmlType;
        this.fieldName = fieldName;
}
emxUIToolbarMenuItem.prototype = new emxUICoreMenuLink;

emxUIToolbarMenuItem.prototype.addMenu = function _emxUIToolbarMenuItem_addMenu(objMenu) {
        this.menu = objMenu;
    //If the Toolbar Item is Dynamic add Dynamic Property to the associated menu
        if(this.dynamicJPO != "undefined" && this.dynamicJPO != null && this.dynamicJPO != "")
        {
            objMenu.dynamicJPO = this.dynamicJPO;
          objMenu.dynamicMethod = this.dynamicMethod;
          objMenu.dynamicName = this.dynamicName;
         }
        this.menu.parent = this;
        if(this.parent != null) {
            this.menu.historyEnabled = this.parent.historyEnabled;
        }
};
var foundFrame = "false";
function setProgressFrame(objWindow) {
   var objFrame = null;
   try {
    for (var i = 0; i < objWindow.frames.length && !objFrame; i++) {
        try {
          if (objWindow.frames[i].document.getElementById && objWindow.frames[i].document.getElementById('imgProgressDiv') != null) {
               objWindow.frames[i].document.getElementById('imgProgressDiv').style.visibility = 'visible';
               foundFrame = "true";
               objFrame = null;
          }
        } catch (objException) {
        }
        try {
           if (objWindow.frames[i].document.getElementById && objWindow.frames[i].document.getElementById("progress")!= null) {
               objWindow.frames[i].showProgress();
               foundFrame = "true";
               objFrame = null;
           }
        } catch (objException) {
        }
     }
     if (!objFrame) {
         for (var i=0; i < objWindow.frames.length && !objFrame; i++) {
                objFrame = setProgressFrame(objWindow.frames[i]);
         }
     }
   } catch (objException) {
   }

   return objFrame;
}


emxUIToolbarMenuItem.prototype.click = function _emxUIToolbarMenuItem_click() {
    try{
        if(this.onClick != null){
          eval(this.onClick);
        }
    }catch(e){

    }

        if (!this.dead && !this.isHTMLControl) {
            this.parent.hide(true);
            if (this.parent.historyEnabled && this.historyEnabled) {
                emxUICore.addToPageHistory(this.suite, this.url, this.linkMenu, this.command, this.target, this.commandTitle, this.linkType, this.linkWidth, this.linkHeight);
            }

            //added for bug : 342600
            if (this.isRMB == "true") {
                if (this.url != "" && this.target == "content") {
                    this.target = "popup";

                    if (this.url.indexOf("javascript:") != 0) {
                        this.url = "javascript:showNonModalDialog(\"" + this.url + "\",600,600,true )";
                    }
                }
            }

            var url = this.url;
            var target = this.target;

            ShowProgress = false
            if (this.url.indexOf("javascript:") == -1 && this.url.indexOf("ShowProgress=false") == -1) {
                if (top.document.getElementById && top.document.getElementById('imgProgressDiv') != null) {
                    top.document.getElementById('imgProgressDiv').style.visibility = 'visible';
                    top.frames['content'].document.body.style.cursor = 'wait';
                }
            }

            emxUICore.link(url, target);

            // Added the below code by Autoliv to make a AJAX call to the server for storing the url in Quick Access Menu.
            // The commadns will be recorded only if it's clicked from the ACtions or the Search menu from global toolbar.
            // The AJAX call is asynchronous so there wont be any waiting time for the user to complete it.
            if (emxUICore.objElem) {
                var menuName = emxUICore.objElem.dynamicName;
                if (menuName == 'alvMainMenuActions' || menuName == 'alvMainMenuSearch') {
                    //DO ajax call
                    if (emxUICore.objElem) {
                        var menuName = emxUICore.objElem.dynamicName;
                        if (menuName == 'alvMainMenuActions' || menuName == 'alvMainMenuSearch') {
                            //DO ajax call

                            var strURL = this.url;
                            if (strURL.indexOf("javascript:") == 0) {
                                if (strURL.indexOf("javascript:top") == -1) {
                                    strURL = "javascript:top." + strURL.substring(strURL.indexOf(":") + 1, strURL.length);
                                }
                                var processUrl = "../common/alvUserRecentActions.jsp";
                                var urlAction = "";
                                if (menuName == 'alvMainMenuActions') {
                                    urlAction = "CreateAction";
                                } else if (menuName == 'alvMainMenuSearch') {
                                    urlAction = "SearchAction";
                                }
                                var params = {
                                    urlAction: urlAction,
                                    displayText: this.text,
                                    url: strURL,
                                }
                                $.ajax({
                                    type: 'POST',
                                    url: processUrl,
                                    data: params,
                                    async: true,
                                });
                            }
                        }
                    }
                }
            }
        }
};

//! Class emxUIToolbarMenuTitle
function emxUIToolbarMenuTitle (strText) {
        this.superclass = emxUICoreMenuTitle;
        this.superclass(strText);
        delete this.superclass;
        this.emxClassName = "emxUIToolbarMenuTitle";
        this.text = strText;
}
emxUIToolbarMenuTitle.prototype = new emxUICoreMenuTitle;

//This function iterates through html elements in overflow menu
function appendOverflowMenuFormElements(form){
  overflowMenuFormFieldValues = '';
  for(var i=0; i<toolbars.length; i++) {
    for(var j=0; j<toolbars[i].items.length; j++) {
      if(toolbars[i].items[j].emxClassName == 'emxUIToolbarOverflowButton'){
        for(var k=0; k<toolbars[i].items[j].menu.items.length; k++) {
          var overflownItem = toolbars[i].items[j].menu.items[k];
          if(overflownItem.isHTMLControl){
            appendToFormFieldValues(overflownItem);
          }
        }
      }
    }
  }
}

var overflowMenuFormFieldValues='';
//This function appends html elements in overflow menu to overflowMenuFormFieldValues
function appendToFormFieldValues(overFlownHTMLElement){
  var  objInput = new Array();
  switch(overFlownHTMLElement.htmlType){
        case "textbox":
        case "text":
        case "checkbox":
            objInput = overFlownHTMLElement.rowElement.getElementsByTagName("INPUT");
        break;
        case "combobox":
             objInput = overFlownHTMLElement.rowElement.getElementsByTagName("SELECT");
        break;
        default:
    }
  for(var n=0; n<objInput.length; n++) {
    if(typeof getInputValue(objInput[n])!="undefined"){
      overflowMenuFormFieldValues+="&"+objInput[n].name+"="+getInputValue(objInput[n]);
    }
  }
}

//This function returns field values of html controls in overflow menu
function getInputValue(obj){
    switch(obj.type){
        case "textarea":
        case "text":
        case "hidden":
            return obj.value;
        break;
        case "select-one":
            return obj[obj.selectedIndex].value;
        break;
        case "checkbox":
          return obj.checked;
        break;
        default:
    }
}

//This function returns form fields for items in overflow menu
function getFieldFromOverflowmenu(fieldName, type){
  var reqField = [];
  for(var i=0; i<toolbars.length; i++) {
    for(var j=0; j<toolbars[i].items.length; j++) {
      if(toolbars[i].items[j].emxClassName == 'emxUIToolbarOverflowButton'){
        for(var k=0; k<toolbars[i].items[j].menu.items.length; k++) {
          var overflownItem = toolbars[i].items[j].menu.items[k];
          if(overflownItem.fieldName  == fieldName){
            reqField[0] = $("input[name="+fieldName +"]")[0];
	    //will be called from emxUIPopupCalendar.prototype.assignInputs in emxUICalendar.js
	    //type is the fields type based on which the hidden fields value will be returned.
            if(type == "date"){
            	reqField[1] = $("input[name="+fieldName +"_msvalue]")[0];
            }
            break;
          }
        }
      }
    }
  }
  return reqField;
}

// Added for Toolbar enhancement code - Begin
//This method submits the toolbar html controls to the specified target location.
function submitToolbarForm(strURL,strTarget,strFormFieldName,itemWidth,itemHeight,uiType,submitFunction,submitProgram,isModal,willSubmit,formField, sCommandCode) {
    var tempCode = eval(sCommandCode);
    if (tempCode) {
        tempCode.main();
        return;
    }
    if (strURL == null || strURL == "")
    {
        return false;
    }
    var formCount=0;
    var formFieldValues="";
    var fieldValue="";
    var checkBoxValues = {};
    var checkBoxName = "";
    appendOverflowMenuFormElements(document.forms[formCount]);
    for(var i=0;i<document.forms[formCount].elements.length;i++){
        if(document.forms[formCount].elements[i].type=="text"){
                fieldValue=document.forms[formCount].elements[i].value;
                formFieldValues+="&"+document.forms[formCount].elements[i].name+"="+fieldValue;
        }
        else if(document.forms[formCount].elements[i].type=="select-one"){
                //Modified to pass the selected option value instead of display value.
                //this will fail in internationalization if value is not passed
                fieldValue = document.forms[formCount].elements[i].options[document.forms[formCount].elements[i].selectedIndex].value;
                formFieldValues+="&"+document.forms[formCount].elements[i].name+"="+fieldValue;
        }
        // Added for Toolbar HTML Widgets to pass the hidden msValue for Date
        else if(document.forms[formCount].elements[i].type=="hidden")
        {
          fieldValue = document.forms[formCount].elements[i].value;
      formFieldValues+="&"+document.forms[formCount].elements[i].name+"="+fieldValue;
        }
        //added for bug : 345219
        else if(document.forms[formCount].elements[i].type=="checkbox")
        {
          if(document.forms[formCount].elements[i].checked){
                fieldValue = document.forms[formCount].elements[i].value;
                checkBoxName  = document.forms[formCount].elements[i].name;
                checkBoxValues[checkBoxName]= {name:checkBoxName,value:fieldValue};
             }
             else {
               checkBoxName  = document.forms[formCount].elements[i].name;
             checkBoxValues[checkBoxName]= {name:checkBoxName,value:"false"};
       }
        }
    }
    for(property in checkBoxValues){
      formFieldValues +="&"+checkBoxValues[property].name+"="+checkBoxValues[property].value;
    }
    formFieldValues+=overflowMenuFormFieldValues;

     if(submitFunction!=null && submitFunction!="" && submitProgram!=null && submitProgram!="")
     {
            var objListWindow = findFrame(this, "listHidden");
            if(!objListWindow){
               objListWindow=findFrame(this, "formViewHidden");
               if(!objListWindow){
                    objListWindow = findFrame(this, "hiddenFrame");
               }
              }
              var url = "";
               var timestamp="";
                if(uiType!=null && uiType!="" && uiType=="table")
                {
                    var objListdis = findFrame(this, "listDisplay");
                  if(objListdis.document.forms[0].timeStamp)
                    {
                        timestamp = objListdis.document.forms[0].timeStamp.value;
                    }
                }
                else if(uiType!=null && uiType=="structureBrowser")
                {
                    timestamp = timeStamp;

                }
              if(strURL.indexOf("?")>0)
              {
                    strURL = strURL.substring(strURL.indexOf("?")+1,strURL.length);
                    url="emxAEFSubmitJPO.jsp?submitFunction="+submitFunction+"&submitProgram="+submitProgram+"&"+strURL+"&timeStamp="+timestamp+formFieldValues;
              }
              else
              {
                    url="emxAEFSubmitJPO.jsp?submitFunction="+submitFunction+"&submitProgram="+submitProgram+"&timeStamp="+timestamp+formFieldValues;
              }


              var objForm = objListWindow.document.location;
              objForm.href = url;
        }
        else{
            //If the url is javascript simply evaluate it
            if(strURL.indexOf("javascript:")<0)
            {
                //If submit function and submit program is given then invoke it in hidden frame
                    if(formField=="textbox"){
                            if(strTarget==""){
                                strTarget="popup";
                            }
                            submitToTargetLocation(strURL,strTarget,strFormFieldName,itemWidth,itemHeight,uiType,isModal,willSubmit,formFieldValues);
                    }
                    else if(formField=="combobox"){
                            submitToTargetLocation(strURL,strTarget,strFormFieldName,itemWidth,itemHeight,uiType,isModal,willSubmit,formFieldValues);
                    }
                    else if(formField=="submit"){
                            submitToTargetLocation(strURL,strTarget,strFormFieldName,itemWidth,itemHeight,uiType,isModal,willSubmit,formFieldValues);
                    }
                    else if(formField=="checkbox"){
                            submitToTargetLocation(strURL,strTarget,strFormFieldName,itemWidth,itemHeight,uiType,isModal,willSubmit,formFieldValues);
                    }
            }
            else
            {
                eval(strURL);
            }
        }
};
//This method will submit the href to the specified target location
function submitToTargetLocation(strURL,strTarget,strFormFieldName,itemWidth,itemHeight,uiType,isModal,willSubmit,formFieldValues)
{
    var timestamp="";
    var uiMode="";
    var frameName = "";
    if(uiType!=null && uiType!="" && uiType=="table")
    {
        uiMode = document.location+"";
        var objlistdis = findFrame(this,"listDisplay")
        if(uiMode.indexOf("emxTableEdit")>0)
        {
           frameName = findFrame(parent,"formEditDisplay");
           timestamp = frameName.document.forms[0].timeStamp.value;
        }
        else if(objlistdis.document.forms[0].timeStamp)
        {
            //frameName = findFrame(parent,"listDisplay");
            timestamp = objlistdis.document.forms[0].timeStamp.value;
        }
    }
    else if(uiType!=null && uiType=="structureBrowser")
    {
        timestamp = timeStamp;
    }
    else if(uiType!=null && uiType!="" && uiType=="form")
    {
        var headerFrame = findFrame(this, "formViewDisplay");
        if(!headerFrame)
        {
            headerFrame = findFrame(this, "formEditDisplay");
        }
        timestamp = headerFrame.document.forms[0].timeStamp.value;
    }

    if(strTarget=="popup"){
        submitToPopup(strURL,strTarget,itemWidth,itemHeight,uiType,isModal,willSubmit,formFieldValues);
    }
    else if(strTarget=="searchContent"){
        top.findSearchFrame(strURL,null,"test",strFormFieldName,null,"common",formFieldValues);
    }
    else{
          strURL+="&timeStamp="+timestamp;
        var frameName = findFrame(parent,strTarget);
//This is added to do the findframe from the top level if it is not found from the parent level
        if(!frameName)
        {
           frameName = findFrame(top,strTarget);
        }
        if(!frameName)
        {
           frameName = findFrame(top,"content");
        }
        if(!frameName)
        {
            var strFeatures = "width="+itemWidth+", height="+itemHeight+",scrollbars=yes,toolbar=no,location=no,resizable=no,titlebar=no";
            var newWin1 = window.open("about:blank","pDialog",strFeatures);
            document.forms[0].target=newWin1.name;
            document.forms[0].action=strURL;
            document.forms[0].method="post";
            document.forms[0].submit();
        }
        else // Code adds the form Field values to the exisiting URL/Href and loads it in the strTarget frame
        {
           submitPost(strURL,frameName.name,formFieldValues,false);
        }
    }

}
//This method will submit the href to popup. In case of emxTable and structurebrowser the
//method to submit differs.
function submitToPopup(strURL,strTarget,itemWidth,itemHeight,uiType,isModal,willSubmit,formFieldValues)
{
    var bPopup =("popup"==strTarget) ? "true" : "false";
    var timestamp="";
    var uiMode="";
    if(uiType!=null && uiType!="" && uiType=="table")
    {
        uiMode = document.location+"";
        var objlistdis = findFrame(this,"listDisplay");
        if(uiMode.indexOf("emxTableEdit")>0)
        {
           frameName = findFrame(parent,"formEditDisplay");
           timestamp = frameName.document.forms[0].timeStamp.value;
        }
        else if(objlistdis.document.forms[0].timeStamp)
        {
            //frameName = findFrame(parent,"listDisplay");
            timestamp = objlistdis.document.forms[0].timeStamp.value;
        }
    }
    else if(uiType!=null && uiType=="structureBrowser")
    {
        timestamp = timeStamp;

    }
    else if(uiType!=null && uiType!="" && uiType=="form")
    {
        var headerFrame = findFrame(parent, "formViewDisplay");
        if(!headerFrame)
        {
            headerFrame = findFrame(parent, "formEditDisplay");
        }
        timestamp = headerFrame.document.forms[0].timeStamp.value;
    }

    if(uiType!=null && uiType!="null" && uiType!="" && uiType=="table" ){
        strURL+=formFieldValues+"&timeStamp="+timestamp;
        if(willSubmit=="true"){
        submitList(strURL, strTarget, "none", bPopup, itemWidth, itemHeight, null);
    }
        else{
           if(isModal=="true"){
              showModalDialog(strURL,itemWidth,itemHeight,true);
           }
           else{
                showNonModalDialog(strURL,itemWidth,itemHeight,true);
           }
        }
    }
    else if(uiType=="structureBrowser"){
        strURL+="&timeStamp="+timestamp;
        if(willSubmit=="true"){
        submitFreezePaneData(strURL, strTarget, "none", bPopup, "true", itemWidth, itemHeight, null);
    }
    else{
           if(isModal=="true"){
                showModalDialog("../common/emxBlank.jsp",itemWidth,itemHeight,true);
                var objWindow = top.modalDialog.contentWindow;
                //Added for Bug 345778
                submitPost(strURL,objWindow.name,formFieldValues,true);
           }
           else{
              //Last parameter to showNonModalDialog()is set to true to get new NonModalDialog window opened
                var objWindow = showNonModalDialog("../common/emxBlank.jsp",itemWidth,itemHeight,true,true);
                //Added for Bug 345778
                submitPost(strURL,objWindow.name,formFieldValues,true);
           }
        }
    }
    else{
        if(itemWidth==null || itemWidth==""){
            itemWidth="600";
        }
        if(itemHeight==null || itemHeight==""){
            itemWidth="600";
        }
        strURL+="&timeStamp="+timestamp;
        if(isModal=="true"){
              showModalDialog("about:blank",itemWidth,itemHeight,true);
              var objWindow = top.modalDialog.contentWindow;
              submitPost(strURL,objWindow.name,formFieldValues,true);
        }
        else{
              var objWindow = showNonModalDialog("about:blank",itemWidth,itemHeight,true,true);
              submitPost(strURL,objWindow.name,formFieldValues,true);
        }
    }
}
//This method handles the enter key in the textbox. It calls submitToolbarForm method which submits the form
//It also stops the content page form from submitting.
function isEnterKeyPressed(e,strURL,strTarget,strFormFieldName,itemWidth,itemHeight,uiType,submitFunction,submitProgram,isModal,willSubmit,formField, sCommandCode)
{
        var pK = document.all?window.event.keyCode:e.which;
        if(pK==13)
        {
			if(emxUIConstants.STR_FIELD_DIRECT_ENTRY){
        		storeSearchHistory(jQuery("#AEFGlobalFullTextSearch").val(),"AEFGlobalFullTextSearch");
            	this.$(".ui-autocomplete").last().css("display", "none");
			}
            document.forms[0].onsubmit=stopFormSubmit;
            if (eval(sCommandCode) && isValidSearchTextFTS(jQuery("#AEFGlobalFullTextSearch").val(), parseInt(emxUIConstants.FTS_MINIUM_SEARCHCHARS)))
            {
                eval(sCommandCode).main();
                return;
            }
            else if(strURL.length!=0 && !sCommandCode)
            {
            	if(isValidSearchTextFTS(jQuery("#AEFGlobalFullTextSearch").val(), parseInt(emxUIConstants.FTS_MINIUM_SEARCHCHARS)))
                submitToolbarForm(strURL,strTarget,strFormFieldName,itemWidth,itemHeight,uiType,submitFunction,submitProgram,isModal,willSubmit,formField);
            }
            else
            {
                    var submitObj = "";
                    var elmLength = document.forms[0].elements.length;
                       if(noOfButtons<2){
                        for(var i=0;i<elmLength;i++){
                            if(document.forms[0].elements[i].type=="button"){
                                submitObj=document.forms[0].elements[i];
                                submitObj.click();
                                break;
                            }
                        }
                    }
            }
        }
}


function validateSearchText(strURL,strTarget,strFormFieldName,itemWidth,itemHeight,uiType,submitFunction,submitProgram,isModal,willSubmit,action,sCommandCode){
	if(emxUIConstants.STR_FIELD_DIRECT_ENTRY){
		storeSearchHistory(jQuery("#AEFGlobalFullTextSearch").val(),"AEFGlobalFullTextSearch");
	}
	if(isValidSearchTextFTS(jQuery("#AEFGlobalFullTextSearch").val(), parseInt(emxUIConstants.FTS_MINIUM_SEARCHCHARS)))
		submitToolbarForm(strURL,strTarget,strFormFieldName,itemWidth,itemHeight,uiType,submitFunction,submitProgram,isModal,willSubmit,action,sCommandCode);
}

function isValidSearchTextFTS(searchText, minchars, fromCustomTableView){
	if(searchText.length > 0 && !fromCustomTableView) {
		var txtVaal = searchText;
		if(searchText.indexOf("*") >= 0 || searchText.indexOf("?") >= 0) {
			while(searchText.indexOf("*") >= 0){
				searchText = searchText.replace("*", "");
			}
			while(searchText.indexOf("?") >= 0){
				searchText = searchText.replace("?", "");
			}
			if(searchText.length < minchars) {
				var stralert = emxUIConstants.STR_WILDCHARALERT;
				var strSearchAle = emxUIConstants.STR_WILDCHARCONFIRMSTR ;
				var strConfirm = emxUIConstants.STR_WILDCHARCONFIRM;
				strSearchAle = strSearchAle.replace(/{N}/, minchars);
				strSearchAle = strSearchAle.replace(/{ST}/, txtVaal);
				stralert = stralert.replace(/{N}/, minchars);
				stralert = stralert.replace(/{ST}/, txtVaal);
				strConfirm = strConfirm.replace(/{N}/, minchars);
				strConfirm = strConfirm.replace(/{ST}/, txtVaal);
				if(emxUIConstants.FTS_CHAR_VIOLATION=="true") {
					if(!confirm(strConfirm)){
						return false;
					}
				} else {
					alert(strSearchAle);
					return false;
				}
			}
		}
	}
	return true;
}
//This method is used to stop the content form from being submitted in case of target location is popup.
function stopFormSubmit()
{
  return false;
}


function textboxClicked(textBox){
  textBox.focus();
  textBox.onfocus = function () { this.select();};
}

//! Class emxUIToolbarFormField
function emxUIToolbarFormField(htmlControl,itemName,itemLabel,strURL,strTarget,actionLabel,uiType,itemWidth,itemHeight,htmlString,submitFunction,submitProgram,format,isModal,willSubmit,width,altText,strID,strJPOName,strMethodName,strCmdName,labelLength,strAlignment,sCommandCode,msValue,manualEdit,defaultActualValue,defaultOIDValue){
    this.url=strURL;
    this.target=strTarget;
    delete this.superclass;
    this.formFieldName=itemName;
    this.actionLabel=actionLabel;
    this.htmlControl=htmlControl;
    this.strAlignment = strAlignment;
    var strDisplayText = itemLabel.htmlDecode();
    if(strDisplayText.length > strID)
    {
         strDisplayText = strDisplayText.substring(0, Math.min(strID, strDisplayText.length)) + "...";
    }
    strDisplayText = strDisplayText.htmlEncode();
    var strActionLabel = actionLabel.htmlDecode();
    if(strActionLabel.length > strID)
    {
        strActionLabel = actionLabel.substring(0,Math.min(strID, actionLabel.length)) + "...";
    }
    strActionLabel = strActionLabel.htmlEncode();

    this.itemLabel=itemLabel;
    var formName = "navigatorForm";
    if(document.forms[0])
    {
        formName = document.forms[0].name;
    }
    if(uiType=="structureBrowser")
    {
        formName="emxTableForm";
    }

    var actionWidth = "";
    if(width == null || width == "")
    {
        //width ="width:70px;";
    }
    else
    {
        width = "width:" + width + "px;";
        actionWidth = width;
    }
    switch(htmlControl){

        case "textbox":
           // If the format = chooser  in Textbox enter key press should not do anything
          if(format!= null && format != "chooser" && format!="date")
          {
            this.html = "&nbsp;<label title=\""+altText+"\" class=\"toolbar-panel-label\">"+strDisplayText+"</label>"+ "&nbsp;<input type=\""+
            "text" + "\" class=text  title=\""+altText+"\" id=\""+itemName +"\" name=\""+
              itemName + "\" value=\""+htmlString+"\" onClick=\"textboxClicked(this)\" onkeyup=\"getSearchHistory(this)\" onKeyPress=\"isEnterKeyPressed(event, '"+this.url + "' , '" + this.target +"' , '"+this.formFieldName+"' , '"+itemWidth+"' , '"+itemHeight+"' , '"+uiType+"' , '"+submitFunction+"' , '"+submitProgram+"' , '"+isModal+"' , '"+willSubmit+"' , 'textbox','" + sCommandCode +"' )\" value= ''" ;
              if(width != null && width != "") {
                  this.html += " style=\""+width+"\"";
              }
          }
          else
          {
              this.html = "&nbsp;<label title=\""+altText+"\" class=\"toolbar-panel-label\">"+strDisplayText+"</label>"+ "&nbsp;<input type=\""+
              "text" + "\" class=text  title=\""+altText+"\" id=\""+itemName +"\" name=\""+
              itemName + "\" value=\""+htmlString+"\"  value= ''" ;
              if(width != null && width != "") {
                  this.html += " style=\""+width+"\"";
              }
          }
           // To make the Textbox readonly for type/vault chooser and date
            if(format!=null && format=="date")
            {
                this.html+="readonly";
            }else if(format!=null && format=="chooser" && manualEdit != 'true' ){
              this.html+="readonly";
            }
            if (sCommandCode && format!=null && format!="fullsearch")
            {
                this.html += " onchange=\"submitToolbarForm('','','','','','','','','','','','" + sCommandCode+"')\"";
            }

            this.html += "/>";
            if(format!=null && format=="chooser"){
              var hiddenField = itemName+"_actualValue";
              var hiddenFieldOID = itemName+"_OID";
              this.html += "<input id=\""+hiddenField+"\" name=\""+hiddenField+"\" type=hidden value=\""+defaultActualValue+"\" />";
              this.html += "<input id=\""+hiddenFieldOID+"\" name=\""+hiddenFieldOID+"\" type=hidden value=\""+defaultOIDValue+"\" />";
            }
            if(format!=null && format=="date")
            {
                /*
                showCalendar will take inputTime parameter to set the selected item in the calendar.
                The actual date value is read from the xml and passed to showCalendar method
                Start
                */
                var inputTime = msValue;
                if (inputTime && inputTime != null && inputTime != "") {
                    inputTime = new Number(inputTime);
                    var dateObj = new Date(inputTime);

                    var month = dateObj.getMonth() + 1;
                    var day = dateObj.getDate();
                    var year = dateObj.getFullYear();
                    var hours = dateObj.getHours();
                    var minutes = dateObj.getMinutes();
                    var seconds = dateObj.getSeconds();

                    var ampm = "AM";
                    if(new Number(hours) > 11 && new Number(hours) != 12){
                        hours = hours - 12;
                        ampm = "PM";
                    }
                    inputTime = month + "/" + day + "/" + year + " " + hours + ":" + minutes + ":" + seconds + " " + ampm;
                }
                else {
                    inputTime = "";
                }
                //End

                this.html+="&nbsp;";
                this.html+="<a href=\"javascript:showCalendar('"+formName+"' , '"+itemName+"' , '" + inputTime +"' ,'' ,'' ,'')\">";
                this.html+="<img src=\"../common/images/iconSmallCalendar.gif\"  style=\"display:inline\" border=\"0\" valign=\"absmiddle\" name = img5></a>";
                this.html+="<input type=\"hidden\" name=\""+itemName+"_msvalue\" value=\""+msValue+"\"/>";
            }
      // For textbox with type/vault chooser
        if(format!=null && format=="chooser")
            {
                this.html+="&nbsp;";
                if(manualEdit=='true'){
                  this.html+="<input type='button' name='chooser' class='button' value='...' style=\"\" title=\""+altText+"\" onClick=\"submitToolbarForm('"+this.url+"&formName="+formName+"&fieldNameActual="+itemName+"&fieldNameDisplay="+itemName+"', '"+this.target+"' , '"+this.formFieldName+"' , '"+itemWidth+"' , '"+itemHeight+"' , '"+uiType+"' , '"+submitFunction+"' , '"+submitProgram+"' , '"+isModal+"' , '"+willSubmit+"' , 'submit'"+")\">";
                }else{
                  this.html+="<input type='button' name='chooser' class='button' value='...' style=\"\" title=\""+altText+"\" onClick=\"submitToolbarForm('"+this.url+"&formName="+formName+"&fieldNameActual="+itemName+"&fieldNameDisplay="+itemName+"', '"+this.target+"' , '"+this.formFieldName+"' , '"+itemWidth+"' , '"+itemHeight+"' , '"+uiType+"' , '"+submitFunction+"' , '"+submitProgram+"' , '"+isModal+"' , '"+willSubmit+"' , 'submit', '"+sCommandCode+"')\">";
                }
                noOfButtons++;
            }
      // Button will  be displayed if url specified and setting Action Label is present
            if(actionLabel.length!= 0 && strURL!= null && strURL!= "")
            {
                this.html += "&nbsp;<input type=\"button\" name=\""+itemName+ "\" class=\"button\" style=\"\" title=\""+altText+"\" onClick=\"submitToolbarForm('"+this.url+"' , '"+this.target+"' , '"+this.formFieldName+"' , '"+itemWidth+"' , '"+itemHeight+"' , '"+uiType+"' , '"+submitFunction+"' , '"+submitProgram+"' , '"+isModal+"' , '"+willSubmit+"' , 'submit', '"+ sCommandCode +"')\" onKeyPress=\"isEnterKeyPressed(event, '"+this.url + "' , '" + this.target +"' , '"+this.formFieldName+"' , '"+itemWidth+"' , '"+itemHeight+"' , '"+uiType+"' , '"+submitFunction+"' , '"+submitProgram+"' , 'submit', '"+ sCommandCode +"')\" value=\""+strActionLabel+"\" />";
                noOfButtons++;
            }
            if(format!=null && format=="fullsearch"){
                this.html += "&nbsp;<img src=\"../common/images/searchPLMTB.png\" border=\"0\" align=\"top\" style=\"cursor: pointer;display: none;\" name=\""+itemName+ "\" class=\"button\" title=\""+altText+"\" onClick=\"submitToolbarForm('"+this.url+"' , '"+this.target+"' , '"+this.formFieldName+"' , '"+itemWidth+"' , '"+itemHeight+"' , '"+uiType+"' , '"+submitFunction+"' , '"+submitProgram+"' , '"+isModal+"' , '"+willSubmit+"' , 'submit', '"+ sCommandCode +"')\" onKeyPress=\"isEnterKeyPressed(event, '"+this.url + "' , '" + this.target +"' , '"+this.formFieldName+"' , '"+itemWidth+"' , '"+itemHeight+"' , '"+uiType+"' , '"+submitFunction+"' , '"+submitProgram+"' , 'submit', '"+ sCommandCode +"')\" value=\""+strActionLabel+"\" />";
            }
            break;
        case "combobox":
            this.html=htmlString;
            if(actionLabel.length!=0)
            {
                this.html += "&nbsp;<input type=\"button\" name=\""+itemName+ "\" class=\"button\" style=\"\" title=\""+altText+"\" onClick=\"submitToolbarForm('"+this.url+"' , '"+this.target+"' , '"+this.formFieldName+"' , '"+itemWidth+"' , '"+itemHeight+"' , '"+uiType+"' , '"+submitFunction+"' , '"+submitProgram+"' , '"+isModal+"' , '"+willSubmit+"' , 'submit', '"+ sCommandCode +"')\" onKeyPress=\"isEnterKeyPressed(event, '"+this.url + "' , '" + this.target +"' , '"+this.formFieldName+"' , '"+itemWidth+"' , '"+itemHeight+"' , '"+uiType+"' , '"+submitFunction+"' , '"+submitProgram+"' , 'submit', '"+ sCommandCode +"')\" value=\""+strActionLabel+"\" />";
                noOfButtons++;
            }
            break;
        case "submit":
            this.html = "<input type=\"button\" name=\""+itemName+ "\" class=\"button\" style=\""+actionWidth+"\" title=\""+altText+"\" onClick=\"submitToolbarForm('"+this.url+"' , '"+this.target+"' , '"+this.formFieldName+"' , '"+itemWidth+"' , '"+itemHeight+"' , '"+uiType+"' , '"+submitFunction+"' , '"+submitProgram+"' , '"+isModal+"' , '"+willSubmit+"' , 'submit', '"+ sCommandCode +"')\" onKeyPress=\"isEnterKeyPressed(event, '"+this.url + "' , '" + this.target +"' , '"+this.formFieldName+"' , '"+itemWidth+"' , '"+itemHeight+"' , '"+uiType+"' , '"+submitFunction+"' , '"+submitProgram+"' , 'submit', '"+ sCommandCode +"')\" value=\""+strActionLabel+"\" />";
            noOfButtons++;
            break;
    case "checkbox":
      // Modified for bug 347655
       if(htmlString == "true" || htmlString == "TRUE")
             this.html = "&nbsp;<input type=\""+htmlControl + "\" id=\""+itemName +"\" name=\""+itemName + "\" value=\"true\" checked onClick=\"submitToolbarForm('"+this.url + "' , '" + this.target +"' , '"+this.formFieldName+"' , '"+itemWidth+"' , '"+itemHeight+"' , '"+uiType+"' , '"+submitFunction+"' , '"+submitProgram+"' , '"+isModal+"' , '"+willSubmit+"' , 'checkbox','" + sCommandCode +"' )\"/> <label title=\" "+altText+" \" class=\"toolbar-panel-label\">"+strDisplayText+"&nbsp;</label>" ;
         else
             this.html = "&nbsp;<input type=\""+htmlControl + "\" id=\""+itemName +"\" name=\""+itemName + "\" value=\"true\" onClick=\"submitToolbarForm('"+this.url + "' , '" + this.target +"' , '"+this.formFieldName+"' , '"+itemWidth+"' , '"+itemHeight+"' , '"+uiType+"' , '"+submitFunction+"' , '"+submitProgram+"' , '"+isModal+"' , '"+willSubmit+"' , 'checkbox','" + sCommandCode +"' )\"/> <label title=\" "+altText+" \" class=\"toolbar-panel-label\">"+strDisplayText+"&nbsp;</label>" ;
            if(actionLabel.length!=0)
            {
                this.html += "&nbsp;<input type=\"button\" name=\""+itemName+ "\" class=\"button\" style=\"\" title=\""+altText+"\" onClick=\"submitToolbarForm('"+this.url+"' , '"+this.target+"' , '"+this.formFieldName+"' , '"+itemWidth+"' , '"+itemHeight+"' , '"+uiType+"' , '"+submitFunction+"' , '"+submitProgram+"' , '"+isModal+"' , '"+willSubmit+"' , 'submit', '"+ sCommandCode +"')\" onKeyPress=\"isEnterKeyPressed(event, '"+this.url + "' , '" + this.target +"' , '"+this.formFieldName+"' , '"+itemWidth+"' , '"+itemHeight+"' , '"+uiType+"' , '"+submitFunction+"' , '"+submitProgram+"' , 'submit', '"+ sCommandCode +"')\" value=\""+strActionLabel+"\" />";
                noOfButtons++;
            }
            break;
    }
    this.element    = null;
    this.text = this.html;
}

emxUIToolbarFormField.prototype.url ="";
emxUIToolbarFormField.prototype.target="";
emxUIToolbarFormField.prototype.htmlControl="";
emxUIToolbarFormField.prototype.formFieldName ="";
emxUIToolbarFormField.prototype.itemLabel="";
emxUIToolbarFormField.prototype.actionLabel="";

emxUIToolbarFormField.prototype = new emxUIToolbarButton;
emxUIToolbarFormField.prototype.init = function _emxUIToolbarFormField_init(objParent){
    this.element = document.createElement("td");
    //this.element.className = "toolbar-panel-label";
    this.element.innerHTML=this.html;
    objParent.appendChild(this.element);
    this.createDOM();
}

emxUIToolbarFormField.prototype.emxUIBaseCreateDOM = emxUIToolbarFormField.prototype.createDOM;
emxUIToolbarFormField.prototype.createDOM = function _emxUIToolbarFormField_createDOM(objParent) {
    if(this.grayout == "true"){
      this.disable();
    }
    if(this.parent.emxClassName == "emxUIToolbarMenu"){
        this.element = document.createElement("li");
        this.element.setAttribute("class", "input");
        this.element.innerHTML = this.html;
        var objThis = this;
        this.element.onmousedown = function(){
            var objEvent = emxUICore.getEvent(objThis.parent && objThis.parent.displayWindow ? objThis.parent.displayWindow : null);
            objEvent.cancelBubble = true;
        };
        return this.element;
    }
};

emxUIToolbarFormField.prototype.anchorStateChange = function _emxUIToolbarFormField_anchorStateChange(anchorElement, disable) {

    var innerHTMLText = anchorElement.innerHTML;
    if(disable)
    {
        var href = anchorElement.getAttribute("href");
        if(href.indexOf("javascript:showCalendar") > -1){
          innerHTMLText = innerHTMLText.replace('/iconSmallCalendar.gif', '/iconSmallCalendarDisabled.gif');
          anchorElement.innerHTML = innerHTMLText;
        }
        if(href && href != "" && href != null)
        {
           anchorElement.setAttribute('href_bak', href);
        }
          anchorElement.removeAttribute('href');
    }else
    {
        var href_bak = anchorElement.getAttribute("href_bak");
        if(href_bak !=null && href_bak.indexOf("javascript:showCalendar") > -1){
          innerHTMLText = innerHTMLText.replace('/iconSmallCalendarDisabled.gif', '/iconSmallCalendar.gif');
          anchorElement.innerHTML = innerHTMLText;
        }
        if(anchorElement.getAttribute("href_bak")!= null)
        {
          anchorElement.setAttribute('href', anchorElement.attributes['href_bak'].nodeValue);
        }
    }
};

emxUIToolbarFormField.prototype.stateChange = function _emxUIToolbarFormField_stateChange(disable) {
   if(this.element)
     {
        var children = this.element.children ? this.element.children : this.element.childNodes;

      for(var ci = 0; ci < children.length; ci++)
      {
         var htmlChild = children[ci];
         if(htmlChild.tagName == "A")
         {
            this.anchorStateChange( htmlChild, disable);
         }else
         {
            htmlChild.disabled = disable;
         }
       }
     }
};
emxUIToolbarFormField.prototype.emxUIToolbarItemDisable = emxUIToolbarFormField.prototype.disable;
emxUIToolbarFormField.prototype.disable = function _emxUIToolbarFormField_disable() {
            //this.emxUIToolbarItemDisable();
            this.enabled = false;
      this.stateChange(true);
};
emxUIToolbarFormField.prototype.emxUIToolbarItemEnable = emxUIToolbarFormField.prototype.enable;
emxUIToolbarFormField.prototype.enable = function _emxUIToolbarFormField_enable() {
        //this.emxUIToolbarItemEnable();
        this.enabled = true;
        this.stateChange(false);
};

/******ixk: dynamic label********/
function emxUIToolbarLabelField(format,itemName,itemLabel,strAlignment){
    this.itemName = itemName;
    this.itemLabel  = itemLabel;
    this.text  = itemLabel;
    this.strAlignment = strAlignment;
}

emxUIToolbarLabelField.prototype = new emxUIToolbarButton;
emxUIToolbarLabelField.prototype.init = function _emxUIToolbarLabelField_init(objParent){
   //this.html = "<div id='"+this.itemName+"'>"+this.itemLabel+"</div>";
   this.html = this.itemLabel;
   this.createDOM(objParent);
};

emxUIToolbarLabelField.prototype.createDOM = function _emxUIToolbarLabelField_createDOM(objParent) {
    this.element = document.createElement("td");
    this.element.id = this.itemName;
    //this.element.className = "toolbar-panel-label";
    this.element.innerHTML=this.html;
    objParent.appendChild(this.element);
};
/******ixk: dynamic label********/

// Added for Toolbar enhancement code - End

//Added for Bug 345778
function getKeyValuePairs(formFieldValues)
{
  var retformFieldValues =[];
  var array = formFieldValues.split('&');
  for(var i = 0 ; i < array.length ; i++)
  {
    var item = array[i];
    var fieldName  = item.substring(0,item.indexOf("="));
    var fieldValue = item.substring(item.indexOf("=") + 1);
    retformFieldValues[i]= {name:fieldName,value:fieldValue};
  }
    return retformFieldValues;
}


function getFinalURLforTreeFrames(hostNameDetails, currObjId,registerSuite){
	  var finalCallURL = "/common/emxNavigator.jsp?targetLocation=content&objectId="+ currObjId;
	  if(registerSuite!=""){
		  finalCallURL = finalCallURL+"&emxSuiteDirectory="+registerSuite;
	  }
			  finalCallURL = finalCallURL.replace("..","");
			  finalCallURL = hostNameDetails + finalCallURL;
return finalCallURL;
}

//displays Page URL when clicked on Page URL Icon
function showPageURL(objThis){
  if(!checkForPageURLDiv()){
    var frame = "";
    var documentFrame = null;
    var treeFrameURL = "";
    var contextWindow = emxUICore.findFrame(top,"content");//window.parent.parent;
    if(contextWindow){
    	contextWindow = contextWindow.document;
    } else {
    	contextWindow = document;
    }
    var isNavigatorFrame = (contextWindow.location.href.indexOf('emxNavigator.jsp') > -1) ?true:false;
    	var href = this.document.location.href;
	    var lastIndexOfCommon = href.indexOf("common");
	    var hostNameDetails = href.substring(0,lastIndexOfCommon -1);
	    var splitParameters = href.split("&");
	    var currObjId="";
	    var registerSuite ="";
	    for(var i=0;i<splitParameters.length;i++){
	    	var paramNameValuePair = splitParameters[i].split("=");
	    	if(paramNameValuePair[0]=="objectId"){
	    		currObjId= paramNameValuePair[1];
	    	}else if(paramNameValuePair[0]=="emxSuiteDirectory"){
	    		registerSuite=paramNameValuePair[1];
	    	}
			if(currObjId!="" && registerSuite!=""){
					break;
			}
	    }
      treeFrameURL = getFinalURLforTreeFrames(hostNameDetails, currObjId,registerSuite);
      frame = getRequiredFrame();
      documentFrame = frame.document;
    if(isNavigatorFrame){
      if(frame){
        documentFrame = frame.document;
      }else{
        documentFrame = document;
      }
    }
    var pageURLDiv = documentFrame.createElement("div");
    pageURLDiv.className = "pageURLDiv";
      pageURLDiv.id = "pageURLDiv";
      pageURLDiv.name = "pageURLDiv";
      var intX;
	  var intY;
      if(objThis){
    	  intX = objThis.element.offsetLeft + 15;
    	  intY = objThis.element.offsetTop;
      }else{
    	  intX = window.screenX;
    	  intY = window.screeny;
      }

      if(objMainToolbar.container && objMainToolbar.container.className != "toolbar-frame folded"){
        intX += objMainToolbar.element.clientWidth;
      }
     if(strUIType=="structureBrowser"){
    	var phd = document.getElementById("pageHeadDiv");
    	var ht = phd.clientHeight;
    	if(ht <= 0){
    		ht = phd.offsetHeight;
    	}
        intY = ht;
      }
      pageURLDiv.style.top = intY + "px";
      pageURLDiv.style.left = intX + "px";
      var textfield = documentFrame.createElement("input");
      textfield.className = "pageURL";
      textfield.setAttribute("type", "text");
      textfield.setAttribute("id", "pageURLTextBox");
      pageURLDiv.appendChild(textfield);
      setTimeout(function(){
      textfield.focus();
      textfield.select();},50);
      var strTextURL = "";
      /*if(strUIType=="structureBrowser"){
        document.body.appendChild(pageURLDiv);
        if(isFullSearch == "true"){
            strTextURL = top.location.href;
        }else{
            strTextURL = document.location.href;
          //textfield.setAttribute("value",treeFrameURL);
        }
      }else*/ if(document.location.href.indexOf("common/emxCreate.jsp?")>0){
        if(isIE && document.getElementById("divPageBody")){
          document.getElementById("divPageBody").appendChild(pageURLDiv);
        }else{
          document.body.appendChild(pageURLDiv);
        }
        strTextURL = document.location.href;
      }
      else if(frame){
        var reqdDiv = document.getElementById("divPageBody");
        if(isIE && reqdDiv){
            reqdDiv.appendChild(pageURLDiv);
        }else{
            documentFrame.body.appendChild(pageURLDiv);
        }
        if(treeFrameURL != ""){
            strTextURL = treeFrameURL;
        } else if(document.location.href.indexOf("common/emxSearchHeader.jsp?")>0){
          //In General Search Page, traverse two levels
            strTextURL = frame.parent.parent.document.location.href;
        }else{
        	if(strUIType=="structureBrowser"){
                if(isFullSearch == "true"){
                    strTextURL = top.location.href;
                }else{
                    strTextURL = document.location.href;
                }
            } else {
            strTextURL = frame.parent.document.location.href;
        }
        }
      }else if(document.body){
        document.body.appendChild(pageURLDiv);
        strTextURL = document.location.href;

      }
      // oeo Fix for IR-095885V6R2012
      // URL is already encoded except for spaces, so global replace only the spaces.
      textfield.setAttribute("value",strTextURL.replace( new RegExp( " ", "gi" ), "%20" ));

      addEvent(pageURLDiv, "mouseout", function () {setTimeout("removePageURLDiv()", 1000);});
      //Fix for IR-021921V6R2011
      var deviation=pageURLDiv.offsetWidth+intX;
      if(deviation > documentFrame.body.offsetWidth){
        deviation=deviation- documentFrame.body.offsetWidth;
        pageURLDiv.style.left = (intX - deviation) + "px";
      }
      //Fix for IR-021921V6R2011
  }
}

function checkForPageURLDiv(){
  var divExists = false;
  if(document.getElementById("pageURLDiv")){
    divExists = true;
  }else{
    var otherFrames = getRequiredFrame();
    if(otherFrames && otherFrames.document.getElementById("pageURLDiv")){
      divExists = true;
    }
  }
  return divExists;
}

function removePageURLDiv(){
  if(document.location.href.indexOf("common/emxCreate.jsp?")>0){
    if(isIE && document.getElementById("divPageBody")
      && document.getElementById("pageURLDiv")){
      document.getElementById("divPageBody").removeChild(document.getElementById("pageURLDiv"));
      return;
    }
  }
  if(document.getElementById("pageURLDiv")){
    var frame = getRequiredFrame();
    var reqdDiv = document.getElementById("divPageBody");
    if(isIE && frame){
        if(strUIType=="structureBrowser"){
            document.body.removeChild(document.getElementById("pageURLDiv"));
        }else if(reqdDiv){
            reqdDiv.removeChild(document.getElementById("pageURLDiv"));
        }
        return;
    }
    else{
        document.body.removeChild(document.getElementById("pageURLDiv"));
        return;
    }
  }
  var otherFrame = getRequiredFrame();
  if(otherFrame && otherFrame.document.getElementById("pageURLDiv")){
    otherFrame.document.body.removeChild(otherFrame.document.getElementById("pageURLDiv"));
  }
}
//Get Required Frame to insert or delete pageURLDiv
function getRequiredFrame(){
  var frameToBeReturned = null;
  if(strUIType=="table")
    {
        var uiMode="";
        uiMode = document.location+"";
        if(uiMode.indexOf("emxTableEdit")>0)
        {
           frameToBeReturned = emxUICore.findFrame(this,"formEditDisplay");
        }
        else
        {
            frameToBeReturned = emxUICore.findFrame(this,"listDisplay");
        }
    }
    else if(strUIType=="form")
    {
        frameToBeReturned = emxUICore.findFrame(this, "formViewDisplay");
        if(!frameToBeReturned)
        {
            frameToBeReturned = emxUICore.findFrame(this, "formEditDisplay");
        }

    }else if (strUIType=="structureBrowser")
    {
     frameToBeReturned = emxUICore.findFrame(parent,"content");
    }else{
      if(document.location.href.indexOf("emxPortalToolbar.jsp?")>0){
        //Portal page
      return emxUICore.findFrame(parent, "portalDisplay");
    }else if(document.location.href.indexOf("emxLifecycleHeader.jsp?")>0){
      //Life Cycle Page
      return emxUICore.findFrame(parent, "pagecontent");
    }else if(document.location.href.indexOf("common/emxSearchHeader.jsp?")>0){
      //General Search Page
      return emxUICore.findFrame(parent, "searchContent");
    }
    }
    if(frameToBeReturned == null || frameToBeReturned == "")
      frameToBeReturned =  this.window;
    return frameToBeReturned;
}

//Added for Bug 345778
var URL,TARGET,FORMFIELDVALUES,ISPOPUP;
function submitPost(url,target,formFieldValues,isPopup)
{
   var objViewHiddenWindow = findFrame(window, "submitHiddenFrame");
   URL = url;
   TARGET = target;
   FORMFIELDVALUES = formFieldValues;
   ISPOPUP = isPopup;
   if(!objViewHiddenWindow){
      objViewHiddenWindow = document.createElement("IFRAME");
      objViewHiddenWindow.width="0%" ;
      objViewHiddenWindow.height="0%" ;
      objViewHiddenWindow.name = "submitHiddenFrame";
      objViewHiddenWindow.src = "emxBlank.jsp";
      document.body.appendChild(objViewHiddenWindow);
      if(!isIE || (isIE && isMinIE10)){
        setTimeout("submitPost(URL,TARGET,FORMFIELDVALUES,ISPOPUP)",50);
        return;
      }
  }

   formFieldValues = getKeyValuePairs(formFieldValues);
   //var docfrag = objViewHiddenWindow.document.createDocumentFragment();
   var form    = objViewHiddenWindow.document.createElement('form');
   form.name   = "emxHiddenForm";
   form.id   = "emxHiddenForm";

   for(var index=0; index<formFieldValues.length; index++)
   {
    var input   = objViewHiddenWindow.document.createElement('input');
    input.type  = "hidden";
    input.name  = formFieldValues[index].name;
    input.id    = formFieldValues[index].name;
    input.value = formFieldValues[index].value;
    form.appendChild(input);
  }

  //docfrag.appendChild(form);
  var oldform = objViewHiddenWindow.document.getElementById("emxHiddenForm");
  if(oldform){
    objViewHiddenWindow.document.body.removeChild(oldform);
  }
  objViewHiddenWindow.document.body.appendChild(form);

  if(!isPopup){
    target  = openerFindFrame(top, target);
    target = target.name;
  }

    var formSubmit = form;
    formSubmit.setAttribute("accept-charset","UTF-8");
    formSubmit.action = url;
    formSubmit.method = "post";
    formSubmit.target = target;
    formSubmit.submit();
    overflowMenuFormFieldValues = '';
}


function closeStructureNavigatorFrame() {


    var obj;
    var contentFrame;
    var objFrameset;
    for(var i = 0; i < objMainToolbar.items.length ; i++){
        var iurl = objMainToolbar.items[i].url;
    if(iurl && iurl.indexOf("closeStructureNavigatorFrame()") >= 0){
        obj = objMainToolbar.items[i];
        break;
    }
    }

    if(obj){
        if(obj.element){
            toggleControlButton(obj,"iconActionClosePanel.gif","iconActionOpenPanel.gif",emxUIConstants.STR_NAV_CLOSE,emxUIConstants.STR_NAV_OPEN,emxUIConstants.STR_CLOSE,emxUIConstants.STR_OPEN);
            obj.url = "javascript:void(openStructureNavigatorFrame())";
        }
    }
    contentFrame=top.findFrame(top,"content");
    objFrameset = contentFrame.document.getElementById("emxStructureNavigatorFrame");
    if(objFrameset != null){
     objFrameset = objFrameset;
    } else {
         contentFrame=top.findFrame(top,"treeContent");
         objFrameset = contentFrame.document.getElementById("emxStructureNavigatorFrame");
    }
    var cols = objFrameset.getAttribute("cols");
    //To retain the frameset width (column values) in IE during open/close of framset--http://support.microsoft.com/kb/981303
    if(isIE){
        cols=cols.split(",")[0];
        if(cols.length >= 4){
            var indx=cols.length-2;
            cols=cols.substring(0,indx);
       }
    } else{
        cols=cols.split(",")[0];
    }
    if(top.StructureNavigator){
    top.StructureNavigator.setCols(cols);
    }

    var treeCols = parseInt(cols);
    while(treeCols > 0){
          treeCols = treeCols - 10;
          objFrameset.setAttribute("cols",treeCols+"0,*,0");
    }
  //Added For IE10, in IE10 change in cols attribute is not reflected, need to add padding
    objFrameset.style.padding = '0px';

}

function toggleControlButton(obj,imageoldName, imageNewName, defaultOldText, defaultNewText,customOldText,customNewText){

     strText = obj.element.innerHTML;
     if(strText.indexOf(">") > -1){
        var strText1= [];
        strText1 = strText.split(">");
        var imageName = strText1[0];
        var textLabel;
        textLabel = obj.element.title;

        imageName= imageName.replace(imageoldName, imageNewName);
        obj.icon = "../common/images/"+imageNewName;
        if(textLabel.indexOf(defaultOldText)> -1){
        textLabel = textLabel.replace(defaultOldText, defaultNewText);
        obj.element.title = textLabel;
        }else{
        textLabel = textLabel.replace(customOldText, customNewText);
            obj.element.title = textLabel;
        }
        obj.element.title = textLabel;
        obj.text=textLabel;

        if (obj.parent.maxLabelChars > -1 && textLabel.length > obj.parent.maxLabelChars) {
            textLabel = textLabel.substring(0, Math.min(obj.parent.maxLabelChars, textLabel.length)) + "...";
        }
        strText=imageName+">";
        obj.element.innerHTML = strText;
   }
    var currMode=obj.element.title;
    if(top.StructureNavigator){
    top.StructureNavigator.setCurrButton(currMode);
    }

    }

function openStructureNavigatorFrame(){

    var obj;
    var contentFrame;
    var objFrameset;
    var colCount;
    var treeColsLength = 200;
    if(top.StructureNavigator){
    colCount=top.StructureNavigator.getCols();
    if(colCount != null) {
    treeColsLength = parseInt(colCount.split(",")[0]);
    }
    }
    contentFrame=top.findFrame(top,"content");
    objFrameset = contentFrame.document.getElementById("emxStructureNavigatorFrame");
    if(objFrameset != null){
     objFrameset = objFrameset;
    } else {
         contentFrame=top.findFrame(top,"treeContent");
         objFrameset = contentFrame.document.getElementById("emxStructureNavigatorFrame");
    }
    var cols = objFrameset.getAttribute("cols");
    var treeCols = parseInt(cols.split(",")[0]);
    while(treeCols < treeColsLength){
          treeCols = treeCols + 10;
          objFrameset.setAttribute("cols",treeCols+",*,0");
    }
    //Added For IE10, in IE10 change in cols attribute is not reflected, need to add padding
    objFrameset.style.padding = '1px';
    
    for(var i = 0; i < objMainToolbar.items.length ; i++){
        var iurl = objMainToolbar.items[i].url;

    if(iurl && iurl.indexOf("openStructureNavigatorFrame()") >= 0){
        obj = objMainToolbar.items[i];
        break;
    }
 }

    if(obj){
        if(obj.element){
            toggleControlButton(obj,"iconActionOpenPanel.gif","iconActionClosePanel.gif",emxUIConstants.STR_NAV_OPEN, emxUIConstants.STR_NAV_CLOSE,emxUIConstants.STR_OPEN,emxUIConstants.STR_CLOSE);
            obj.url = "javascript:void(closeStructureNavigatorFrame())";
        }
    }
}


function closeFrame() {
    var contentFrame;
    var objFrameset;
    contentFrame=top.findFrame(top,"content");
    objFrameset = contentFrame.document.getElementById("emxStructureNavigatorFrame");
    if(objFrameset != null){
     objFrameset = objFrameset;
    } else {
         contentFrame=top.findFrame(top,"treeContent");
         objFrameset = contentFrame.document.getElementById("emxStructureNavigatorFrame");
    }
    var cols = objFrameset.getAttribute("cols");
    var treeCols = parseInt(cols.split(",")[0]);
    while(treeCols > 0){
          treeCols = treeCols - 10;
          setTimeout(function(){objFrameset.setAttribute("cols",treeCols+"0,*,0")},0);
    }
}


    function openFrame() {
    var contentFrame;
    var objFrameset;
    var colCount;
    var treeColsLength = 200;
    contentFrame=top.findFrame(top,"content");
    objFrameset = contentFrame.document.getElementById("emxStructureNavigatorFrame");
    if(objFrameset != null){
     objFrameset = objFrameset;
    } else {
     contentFrame=top.findFrame(top,"treeContent");
     objFrameset = contentFrame.document.getElementById("emxStructureNavigatorFrame");
     }
     if(top.StructureNavigator){
        colCount=top.StructureNavigator.getCols();
        if(colCount != null) {
        treeColsLength = parseInt(colCount.split(",")[0]);
        }
      }
      var cols = objFrameset.getAttribute("cols");
      var treeCols = parseInt(cols.split(",")[0]);
      while(treeCols < treeColsLength){
                  treeCols = treeCols + 10;
                  setTimeout(function(){objFrameset.setAttribute("cols",treeCols+",*,0")},0);
            }

}

function isRowSelected(uiType) {
    return uiType === "table" ? (this.ids && this.ids.length > 1) : (parent.ids && parent.ids.length > 1) ;
}

