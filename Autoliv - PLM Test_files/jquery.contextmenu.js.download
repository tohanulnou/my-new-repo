// jQuery Context Menu Plugin
//
// Version 1.01
//
// Cory S.N. LaViska
// A Beautiful Site (http://abeautifulsite.net/)
//
// More info: http://abeautifulsite.net/2008/09/jquery-context-menu-plugin/
//
// Terms of Use
//
// This plugin is dual-licensed under the GNU General Public License
//   and the MIT License and is copyright A Beautiful Site, LLC.
//
// NOTE: This file has been heavily modified!
if(jQuery)( function() {
    $.extend($.fn, {
        
        contextMenu: function(o, callback) {
            // Defaults
            if( o.menu == undefined ) return false;
            if( o.inSpeed == undefined ) {
            	o.inSpeed = 150;
            } else if( o.inSpeed == 0 ) {
            	o.inSpeed = -1;
            }

            if( o.outSpeed == undefined ) {
            	o.outSpeed = 75;
            } else if( o.outSpeed == 0 ) {
            	o.outSpeed = -1;
            }
            if( o.onOpen == undefined) {
                o.onOpen = function() { };
            }

            $(this).each( function() {
                var $el = $(this), $offset = $el.offset(), $menu = $('#' + o.menu);
                $menu.addClass('contextMenu');
                $el.bind('contextmenu', function(e) {
                    e.stopPropagation();
                    var $srcElement = $(this);
                    $(".contextMenu").hide();
                    
                    if( $el.hasClass('disabled') ) return false;
                    var menuPosition = {}, x, y;
                    menuPosition = $.fn.setContextMenuPostion(e, $menu);
                    x = menuPosition.X;
                    y = menuPosition.Y;

                    // Show the menu
                    $menu.css({ top: y, left: x }).fadeIn(o.inSpeed);
                    // Hover events
                    $menu.find('A').mouseover( function() {
                        $menu.find('LI.hover').removeClass('hover');
                        $(this).parent().addClass('hover');
                    }).mouseout( function() {
                        $menu.find('LI.hover').removeClass('hover');
                    });
                    o.onOpen();

                    // When items are selected
                    $menu.find('A').unbind('click');
                    $menu.find('LI:not(.disabled) A').click( function() {
                        $(".contextMenu").hide();
                        if( callback ) {
                            var href = $(this).attr('href');
                            callback(href.substring(href.indexOf("#") + 1), 
                                $srcElement, 
                                {x: x - $offset.left, y: y - $offset.top, docX: x, docY: y} );
                        }
                        return false;
                    });
                    
                    setTimeout( function() { // Delay for Mozilla 
                        $(document).click( function(evt) {
                            $menu.fadeOut(o.outSpeed)
                        })
                    }, 0);
                });
                // Disable browser context menu (requires both selectors to work in IE/Safari + FF/Chrome)
                $el.add($('UL.contextMenu')).bind('contextmenu', function () { return false });
                
            });
            return $(this);
        },
        
        // Disable context menu items on the fly
        disableContextMenuItems: function(o) {
            if( o == undefined ) {
                // Disable all
                $(this).find('LI').addClass('disabled');
                return( $(this) );
            }
            $(this).each( function() {
                if( o != undefined ) {
                    var d = o.split(',');
                    for( var i = 0; i < d.length; i++ ) {
                        $(this).find('A[href="' + d[i] + '"]').parent().addClass('disabled');
                        
                    }
                }
            });
            return( $(this) );
        },
        
        // Enable context menu items on the fly
        enableContextMenuItems: function(o) {
            if( o == undefined ) {
                // Enable all
                $(this).find('LI.disabled').removeClass('disabled');
                return( $(this) );
            }
            $(this).each( function() {
                if( o != undefined ) {
                    var d = o.split(',');
                    for( var i = 0; i < d.length; i++ ) {
                        $(this).find('A[href="' + d[i] + '"]').parent().removeClass('disabled');
                        
                    }
                }
            });
            return( $(this) );
        },
        
        // Disable context menu(s)
        disableContextMenu: function() {
            $(this).each( function() {
                $(this).addClass('disabled');
            });
            return( $(this) );
        },
        
        // Enable context menu(s)
        enableContextMenu: function() {
            $(this).each( function() {
                $(this).removeClass('disabled');
            });
            return( $(this) );
        },
        
        // Destroy context menu(s)
        destroyContextMenu: function() {
            // Destroy specified context menus
            $(this).each( function() {
                // Disable action
                $(this).unbind('mousedown').unbind('mouseup');
            });
            return( $(this) );
        },
        
        setContextMenuPostion: function (evt, $contextMenu) {
          var d = {}, x, y;
          if( self.innerHeight ) {
              d.pageYOffset = self.pageYOffset;
              d.pageXOffset = self.pageXOffset;
              d.innerHeight = self.innerHeight;
              d.innerWidth = self.innerWidth;
          }else if( document.documentElement && document.documentElement.clientHeight  ) {
              d.pageYOffset = document.documentElement.scrollTop;
              d.pageXOffset = document.documentElement.scrollLeft;
              d.innerHeight = document.documentElement.clientHeight;
              d.innerWidth = document.documentElement.clientWidth;
          } else if( document.body ) {
              d.pageYOffset = document.body.scrollTop;
              d.pageXOffset = document.body.scrollLeft;
              d.innerHeight = document.body.clientHeight;
              d.innerWidth = document.body.clientWidth;
          }

          (evt.pageX) ? x = evt.pageX : x = evt.clientX + d.scrollLeft;
          (evt.pageY) ? y = evt.pageY : y = evt.clientY + d.scrollTop;
          $contextMenu.css({display:'inline-table'});

          //adjust to ensure menu is inside viewable screen
          var right = x + $contextMenu.outerWidth();
          var windowWidth = d.innerWidth + (d.scrollLeft || 0);
          if( right > windowWidth )
          {
            x = x - (right - windowWidth);
          }
          return {'Y': y, 'X': x} ;
        }
        
    });
})(jQuery);